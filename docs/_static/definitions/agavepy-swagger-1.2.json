{
  "apiVersion": "2", 
  "apis": [
    {
      "api_declaration": {
        "apiVersion": "2.0.0-SNAPSHOT-r1dc40", 
        "apis": [
          {
            "description": "Create and list clients.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "Retrieve a list of your active clients. Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [], 
                "responseMessages": [], 
                "summary": "List existing clients", 
                "type": "MultipleClientResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "create", 
                "notes": "This will create a client and return your API keys. Your keys are necessary to obtain an access token and interact with the rest of the APIs. Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\": \"test-client\",\n\t\"description\": \"This is a demo client I created to kick around the APIs.\",\n\t\"tier\": \"UNLIMITED\",\n\t\"callbackUrl\": null\n}", 
                    "description": "The api client to create", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ClientRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid username format"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The user profile cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the profile database"
                  }
                ], 
                "summary": "Create a new client", 
                "type": "SingleClientResponse"
              }
            ], 
            "path": "/clients/v2/"
          }, 
          {
            "description": "Manage a client", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getClientByName", 
                "notes": "Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the client to be deleted", 
                    "name": "clientName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Returns a detailed description of a named client.", 
                "type": "MultipleClientResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the client to be deleted", 
                    "name": "clientName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Immediately deletes this client and renders the API keys useless.", 
                "type": "EmptyClientResponse"
              }
            ], 
            "path": "/clients/v2/{clientName}"
          }, 
          {
            "description": "Manage client subscriptions", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listSubscriptionsForClient", 
                "notes": "Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the client to be deleted", 
                    "name": "clientName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Lists all APIs to which the client is subscribed", 
                "type": "MultipleSubscriptionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addSubscriptionForClient", 
                "notes": "Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the client to be subscribe to this api", 
                    "name": "clientName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"apiName\": \"apps\",\n\t\"apiVersion\": \"v2\",\n\t\"apiProvider\": \"admin\",\n\t\"tier\": \"UNLIMITED\"\n}", 
                    "description": "The api client to create", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ClientSubscriptionRequest"
                  }
                ], 
                "summary": "Lists all APIs to which the client is subscribed", 
                "type": "SingleSubscriptionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteSubscriptionsForClient", 
                "notes": "Requires HTTP BASIC authentication with your API username and password.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the client to be deleted", 
                    "name": "clientName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Unsubscribe the client from all APIs", 
                "type": "EmptyClientResponse"
              }
            ], 
            "path": "/clients/v2/{clientName}/subscriptions"
          }
        ], 
        "authorizations": [
          "basicAuth"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "Client": {
            "id": "Client", 
            "name": "", 
            "properties": {
              "callbackUrl": {
                "description": "Callback URL for OAuth authentication grant.", 
                "name": "callbackUrl", 
                "type": "string"
              }, 
              "consumerKey": {
                "description": "The API key for this client.", 
                "name": "consumerKey", 
                "type": "string"
              }, 
              "consumerSecret": {
                "description": "The API secret for this client.", 
                "name": "consumerSecret", 
                "type": "string"
              }, 
              "description": {
                "description": "Description of the client. This will be shown to users when authentication via OAuth web flows", 
                "name": "description", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the client.", 
                "name": "name", 
                "type": "string"
              }, 
              "tier": {
                "description": "The access tier for this client.", 
                "name": "tier", 
                "type": "string"
              }
            }
          }, 
          "ClientRequest": {
            "id": "ClientRequest", 
            "name": "", 
            "properties": {
              "callbackUrl": {
                "description": "Callback URL for OAuth authentication grant.", 
                "name": "callbackUrl", 
                "type": "string"
              }, 
              "description": {
                "description": "Description of the client. This will be shown to users when authentication via OAuth web flows", 
                "name": "description", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the client.", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }, 
              "tier": {
                "description": "The access tier for this client.", 
                "enum": [
                  "UNLIMITED", 
                  "GOLD", 
                  "SILVER", 
                  "BRONZE"
                ], 
                "name": "tier", 
                "type": "string"
              }
            }
          }, 
          "ClientSubscriptionRequest": {
            "id": "ClientSubscriptionRequest", 
            "name": "", 
            "properties": {
              "apiName": {
                "description": "The name of the API.", 
                "name": "apiName", 
                "required": true, 
                "type": "string"
              }, 
              "apiProvider": {
                "description": "The user who registered the API.", 
                "name": "apiProvider", 
                "required": true, 
                "type": "string"
              }, 
              "apiVersion": {
                "description": "The current major version of the API. This is appended to the api_context to create the base API url.", 
                "name": "apiVersion", 
                "required": true, 
                "type": "string"
              }, 
              "tier": {
                "description": "The access tier for this client.", 
                "enum": [
                  "UNLIMITED", 
                  "GOLD", 
                  "SILVER", 
                  "BRONZE"
                ], 
                "name": "tier", 
                "type": "string"
              }
            }
          }, 
          "EmptyClientResponse": {
            "id": "EmptyClientResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptySubscriptionResponse": {
            "id": "EmptySubscriptionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleClientResponse": {
            "id": "MultipleClientResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "List of clients", 
                "items": {
                  "$ref": "Client"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleSubscriptionResponse": {
            "id": "MultipleSubscriptionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "List of subscriptions", 
                "items": {
                  "$ref": "Subscription"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleClientResponse": {
            "id": "SingleClientResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Client"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleSubscriptionResponse": {
            "id": "SingleSubscriptionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Subscription"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Subscription": {
            "id": "Subscription", 
            "name": "", 
            "properties": {
              "apiContext": {
                "description": "The base url path of the API.", 
                "name": "apiContext", 
                "type": "string"
              }, 
              "apiName": {
                "description": "The name of the API.", 
                "name": "apiName", 
                "type": "string"
              }, 
              "apiProvider": {
                "description": "The user who registered the API.", 
                "name": "apiProvider", 
                "type": "string"
              }, 
              "apiVersion": {
                "description": "The current major version of the API. This is appended to the api_context to create the base API url.", 
                "name": "apiVersion", 
                "type": "string"
              }, 
              "status": {
                "description": "The current status of the API.", 
                "name": "status", 
                "type": "string"
              }, 
              "tier": {
                "description": "The access tier for this client.", 
                "name": "tier", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/clients/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create and manage API keys. Requires HTTP BASIC authentication", 
      "name": "clients", 
      "path": "/clients", 
      "url": "http://localhost:9999/clients"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Register and update new applications.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only public apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "publicOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only private apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "privateOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of available applications.", 
                "type": "MultipleApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "add", 
                "notes": "This is a generic endpoint to add and update applications. If the name and version combination don't exist already, a new application is created. If the combination does exist, the applciation will be updated and the revision incremented.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\": \"wc-demo\",\n\t\"parallelism\": \"SERIAL\",\n\t\"version\": \"1.00\",\n\t\"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n\t\"label\": \"Word Count\",\n\t\"shortDescription\": \"Count words in a file\",\n\t\"longDescription\": \"\",\n\t\"tags\": [\n\t\t\"textutils\",\n\t\t\"gnu\"\n\t],\n\t\"ontology\": [\n\t\t\"http: //sswapmeet.sswap.info/algorithms/wc\"\n\t],\n\t\"defaultMemory\": 1,\n\t\"defaultProcessors\": 1,\n\t\"defaultQueue\": \"debug\",\n\t\"deploymentPath\": \"apps/wc-1.00\",\n\t\"deploymentSystem\": \"demo.storage.example.com\",\n\t\"executionSystem\": \"demo.execute.example.com\",\n\t\"executionType\": \"HPC\",\n\t\"templatePath\": \"wrapper.sh\",\n\t\"testPath\": \"wrapper.sh\",\n\t\"checkpointable\": false,\n\t\"modules\": [\n\t\t\"purge\",\n\t\t\"load TACC\"\n\t],\n\t\"inputs\": [\n\t\t{\n\t\t\t\"id\": \"query1\",\n\t\t\t\"value\": {\n\t\t\t\t\"default\": \"agave: //demo.storage.example.com/apps/wc-1.00/picksumipsum.txt\",\n\t\t\t\t\"validator\": \"\",\n\t\t\t\t\"required\": true,\n\t\t\t\t\"visible\": true\n\t\t\t},\n\t\t\t\"details\": {\n\t\t\t\t\"label\": \"File to count words in: \",\n\t\t\t\t\"description\": \"\"\n\t\t\t},\n\t\t\t\"semantics\": {\n\t\t\t\t\"ontology\": [\n\t\t\t\t\t\"http: //sswapmeet.sswap.info/util/TextDocument\"\n\t\t\t\t],\n\t\t\t\t\"minCardinality\": 1,\n\t\t\t\t\"maxCardinality\": 1,\n\t\t\t\t\"fileTypes\": [\n\t\t\t\t\t\"text-0\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"parameters\": [\n\t\t{\n\t\t\t\"id\": \"printLongestLine\",\n\t\t\t\"value\": {\n\t\t\t\t\"default\": false,\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"validator\": \"\",\n\t\t\t\t\"visible\": true,\n\t\t\t\t\"required\": false\n\t\t\t},\n\t\t\t\"details\": {\n\t\t\t\t\"label\": \"Print the length of the longest line\",\n\t\t\t\t\"description\": \"Command option -L\"\n\t\t\t},\n\t\t\t\"semantics\": {\n\t\t\t\t\"ontology\": [\n\t\t\t\t\t\"xs: boolean\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}", 
                    "description": "The description of the app to add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApplicationRequest"
                  }
                ], 
                "summary": "Register and update new applications.", 
                "type": "SingleApplicationResponse"
              }
            ], 
            "path": "/apps/v2/"
          }, 
          {
            "description": "Get application details", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Get details of an application by it's unique id.", 
                "type": "SingleApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "update", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\": \"wc-demo\",\n\t\"parallelism\": \"SERIAL\",\n\t\"version\": \"1.00\",\n\t\"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n\t\"label\": \"Word Count\",\n\t\"shortDescription\": \"Count words in a file\",\n\t\"longDescription\": \"\",\n\t\"tags\": [\n\t\t\"textutils\",\n\t\t\"gnu\"\n\t],\n\t\"ontology\": [\n\t\t\"http: //sswapmeet.sswap.info/algorithms/wc\"\n\t],\n\t\"defaultMemory\": 1,\n\t\"defaultProcessors\": 1,\n\t\"defaultQueue\": \"debug\",\n\t\"deploymentPath\": \"apps/wc-1.00\",\n\t\"deploymentSystem\": \"demo.storage.example.com\",\n\t\"executionSystem\": \"demo.execute.example.com\",\n\t\"executionType\": \"HPC\",\n\t\"templatePath\": \"wrapper.sh\",\n\t\"testPath\": \"wrapper.sh\",\n\t\"checkpointable\": false,\n\t\"modules\": [\n\t\t\"purge\",\n\t\t\"load TACC\"\n\t],\n\t\"inputs\": [\n\t\t{\n\t\t\t\"id\": \"query1\",\n\t\t\t\"value\": {\n\t\t\t\t\"default\": \"agave: //demo.storage.example.com/apps/wc-1.00/picksumipsum.txt\",\n\t\t\t\t\"validator\": \"\",\n\t\t\t\t\"required\": true,\n\t\t\t\t\"visible\": true\n\t\t\t},\n\t\t\t\"details\": {\n\t\t\t\t\"label\": \"File to count words in: \",\n\t\t\t\t\"description\": \"\"\n\t\t\t},\n\t\t\t\"semantics\": {\n\t\t\t\t\"ontology\": [\n\t\t\t\t\t\"http: //sswapmeet.sswap.info/util/TextDocument\"\n\t\t\t\t],\n\t\t\t\t\"minCardinality\": 1,\n\t\t\t\t\"maxCardinality\": 1,\n\t\t\t\t\"fileTypes\": [\n\t\t\t\t\t\"text-0\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"parameters\": [\n\t\t{\n\t\t\t\"id\": \"printLongestLine\",\n\t\t\t\"value\": {\n\t\t\t\t\"default\": false,\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"validator\": \"\",\n\t\t\t\t\"visible\": true,\n\t\t\t\t\"required\": false\n\t\t\t},\n\t\t\t\"details\": {\n\t\t\t\t\"label\": \"Print the length of the longest line\",\n\t\t\t\t\"description\": \"Command option -L\"\n\t\t\t},\n\t\t\t\"semantics\": {\n\t\t\t\t\"ontology\": [\n\t\t\t\t\t\"xs: boolean\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}", 
                    "description": "The description of the app to add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApplicationRequest"
                  }
                ], 
                "summary": "Update an application.", 
                "type": "SingleApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "manage", 
                "notes": "The PUT operation allows users to performan several management tasks on applications such as cloning a public app for use privately as well as publishing an app for public use. Note that only API administrators can publish applications. Cloning a public app will copy the deployment folder of the public app to your deploymentSystem. Cloning private apps will not.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"action\":\"clone\",\n\t\"name\": \"wc-demo-clone\",\n\t\"version\": \"1.0.0\",\n\t\"deploymentPath\": \"apps/wc-1.0.0-copy\",\n\t\"deploymentSystem\": \"demo.storage.example.com\",\n\t\"executionSystem\": \"demo.execute.example.com\"\n}", 
                    "description": "The operation to perform.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApplicationOperationRequest"
                  }
                ], 
                "summary": "Edit an application.", 
                "type": "SingleApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "Disables an application from further use. The application dependencies remain unchanged, however the application is not longer available from the registry. Once deleted, applications cannot be brought back into service.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes an application.", 
                "type": "EmptyApplicationResponse"
              }
            ], 
            "path": "/apps/v2/{appId}"
          }, 
          {
            "description": "Get application permission details", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissions", 
                "notes": "Users must have read access to this application to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get the permission ACL for this application.", 
                "type": "ApplicationPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateApplicationPermissions", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ_EXECUTE\"\n}", 
                    "description": "The permission add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApplicationPermissionRequest"
                  }
                ], 
                "summary": "Add or update a user's permission for an application.", 
                "type": "EmptyApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deletePermissions", 
                "notes": "This will reset the permissions such that only the user who registered the permission will be able to view it. Application owners cannot remote their own permissions from an application.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all permissions on an application.", 
                "type": "EmptyApplicationResponse"
              }
            ], 
            "path": "/apps/v2/{appId}/pems"
          }, 
          {
            "description": "Get application permission details for a specific user.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissionsForUser", 
                "notes": "Users must have read access to this application to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission.", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a specific user's permissions for an application.", 
                "type": "ApplicationPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updatePermissionsForUser", 
                "notes": "To delete a single user, use the DELETE operation or set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ_EXECUTE\"\n}", 
                    "description": "The permission add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApplicationPermissionRequest"
                  }
                ], 
                "summary": "Add or update a user's permission for an application.", 
                "type": "EmptyApplicationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deletePermissionsForUser", 
                "notes": "This will remove all permissions on an application for a user. Application owners cannot remote their own permissions from an application.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "appId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all permissions for the given user on an application.", 
                "type": "EmptyApplicationResponse"
              }
            ], 
            "path": "/apps/v2/{appId}/pems/{username}"
          }, 
          {
            "description": "List applications matching the the given name", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listByName", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the application. This should not include the version number.", 
                    "name": "name", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only public apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "publicOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only private apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "privateOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of applications with the given name.", 
                "type": "MultipleApplicationResponse"
              }
            ], 
            "path": "/apps/v2/name/{name}"
          }, 
          {
            "description": "List applications matching the the given tag", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listByTag", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The tag of the application.", 
                    "name": "tag", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only public apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "publicOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only private apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "privateOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of applications with the given tag.", 
                "type": "MultipleApplicationResponse"
              }
            ], 
            "path": "/apps/v2/tag/{tag}"
          }, 
          {
            "description": "List applications matching the the given ontological term", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listByOntologyTerm", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The tag of the ontological term.", 
                    "name": "term", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only public apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "publicOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only private apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "privateOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of applications with the given ontological term.", 
                "type": "MultipleApplicationResponse"
              }
            ], 
            "path": "/apps/v2/ontology/{term}"
          }, 
          {
            "description": "Generate a HTML form to run this application.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getJobSubmissionForm", 
                "notes": "The form will vary from application to application as each application is different, but the basic structure will remain the same.", 
                "parameters": [], 
                "summary": "Get a submission form for the named application.", 
                "type": "ApplicationFormResponse"
              }
            ], 
            "path": "/apps/v2/{uniqueName}/form"
          }, 
          {
            "description": "List applications registered on the given system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listBySystemId", 
                "notes": "If authenticated, private applications will be included in the response. If not, only public applications will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The system in question", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only public apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "publicOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Whether to return only private apps.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "privateOnly", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of applications with the given systemId as their executionHost.", 
                "type": "MultipleApplicationResponse"
              }
            ], 
            "path": "/apps/v2/system/{systemId}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "ACL": {
            "id": "ACL", 
            "name": "", 
            "properties": {
              "execute": {
                "description": "can execute", 
                "name": "execute", 
                "type": "boolean"
              }, 
              "read": {
                "description": "can read", 
                "name": "read", 
                "type": "boolean"
              }, 
              "write": {
                "description": "can write", 
                "name": "write", 
                "type": "boolean"
              }
            }
          }, 
          "Application": {
            "id": "Application", 
            "name": "", 
            "properties": {
              "available": {
                "description": "Whether the application is available.", 
                "name": "available", 
                "type": "boolean"
              }, 
              "checkpointable": {
                "description": "Whether the application supports checkpointing.", 
                "name": "checkpointable", 
                "type": "boolean"
              }, 
              "defaultMaxRunTime": {
                "description": "The max execution time that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultMaxRunTime", 
                "type": "string"
              }, 
              "defaultMemoryPerNode": {
                "description": "The default memory in GB to pass to the scheduler if none is given in the job description. This must be less than the max memory parameter in the target queue definition.", 
                "name": "defaultMemoryPerNode", 
                "type": "string"
              }, 
              "defaultNodeCount": {
                "description": "The number of nodes that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultNodeCount", 
                "type": "string"
              }, 
              "defaultProcessorsPerNode": {
                "description": "The number of processors to pass to the scheduler if none are given in the job description. This must be 1 if the app is serial.", 
                "name": "defaultProcessorsPerNode", 
                "type": "string"
              }, 
              "defaultQueue": {
                "description": "The queue on the execution system that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultQueue", 
                "type": "string"
              }, 
              "deploymentPath": {
                "description": "The location in the user's default storage system containing the application wrapper and dependencies.", 
                "name": "deploymentPath", 
                "type": "string"
              }, 
              "deploymentSystem": {
                "description": "The system id of the storage system where this app should run.", 
                "name": "deploymentSystem", 
                "type": "string"
              }, 
              "executionSystem": {
                "description": "The system id of the execution system where this app should run.", 
                "name": "executionSystem", 
                "type": "string"
              }, 
              "executionType": {
                "description": "The execution type of the application. If you're unsure, it's probably HPC.", 
                "enum": [
                  "ATMOSPHERE", 
                  "HPC", 
                  "CONDOR", 
                  "CLI"
                ], 
                "name": "executionType", 
                "type": "string"
              }, 
              "helpURI": {
                "description": "The URL where users can go for more information about the app.", 
                "name": "helpURI", 
                "type": "string"
              }, 
              "icon": {
                "description": "The icon to associate with this app.", 
                "name": "icon", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique id of this app. Comprised of the app name-version.", 
                "name": "id", 
                "type": "string"
              }, 
              "inputs": {
                "description": "The inputs files for this application. ", 
                "items": {
                  "$ref": "ApplicationInput"
                }, 
                "name": "inputs", 
                "type": "array"
              }, 
              "isPublic": {
                "description": "Whether the application is public or private.", 
                "name": "isPublic", 
                "type": "boolean"
              }, 
              "label": {
                "description": "The label to use when generating forms.", 
                "name": "label", 
                "type": "string"
              }, 
              "lastModified": {
                "description": "The date this application was last modified in ISO 8601 format.", 
                "format": "date-time", 
                "name": "lastModified", 
                "type": "string"
              }, 
              "longDescription": {
                "description": "The full text description of this input to use when generating forms.", 
                "name": "longDescription", 
                "type": "string"
              }, 
              "modules": {
                "description": "An array of modules to load prior to the execution of the application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "modules", 
                "type": "array"
              }, 
              "name": {
                "description": "The name of the application. The name does not have to be unique, but the combination of name and version does.", 
                "name": "name", 
                "type": "string"
              }, 
              "ontology": {
                "description": "An array of ontology values describing this application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "ontology", 
                "type": "array"
              }, 
              "outputs": {
                "description": "The outputs files for this application. ", 
                "items": {
                  "$ref": "ApplicationOutput"
                }, 
                "name": "outputs", 
                "type": "array"
              }, 
              "parallelism": {
                "description": "The parallelism type of the application. If you're unsure, it's probably SERIAL.", 
                "enum": [
                  "SERIAL", 
                  "PARALLEL", 
                  "PTHREAD"
                ], 
                "name": "parallelism", 
                "type": "string"
              }, 
              "parameters": {
                "description": "The inputs parameters for this application. ", 
                "items": {
                  "$ref": "ApplicationParameter"
                }, 
                "name": "parameters", 
                "type": "array"
              }, 
              "revision": {
                "description": "The number of times this application has been revised.", 
                "format": "int32", 
                "name": "revision", 
                "type": "integer"
              }, 
              "shortDescription": {
                "description": "The short description of this application.", 
                "name": "shortDescription", 
                "type": "string"
              }, 
              "tags": {
                "description": "An array of tags related to this application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "tags", 
                "type": "array"
              }, 
              "templatePath": {
                "description": "The path to the wrapper script relative to the deploymentPath.", 
                "name": "templatePath", 
                "type": "string"
              }, 
              "testPath": {
                "description": "The path to the test script relative to the deploymentPath.", 
                "name": "testPath", 
                "type": "string"
              }, 
              "uuid": {
                "description": "The UUID of this application. UUID are 36 alphanumeric string.", 
                "name": "uuid", 
                "type": "string"
              }, 
              "version": {
                "description": "The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "ApplicationFormResponse": {
            "id": "ApplicationFormResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "HTML form representing a job submission request for this app", 
                "name": "result", 
                "type": "string"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ApplicationInput": {
            "id": "ApplicationInput", 
            "name": "", 
            "properties": {
              "details": {
                "description": "The details for this input. ", 
                "name": "details", 
                "required": true, 
                "type": "ApplicationInputDetails"
              }, 
              "id": {
                "description": "The id of this input. This will be the replacement string in your wrapper scripts.", 
                "name": "id", 
                "required": true, 
                "type": "string"
              }, 
              "semantics": {
                "description": "The ontologies for this input. ", 
                "name": "semantics", 
                "required": true, 
                "type": "ApplicationInputOntology"
              }, 
              "value": {
                "description": "The inputs files for this input. ", 
                "name": "value", 
                "required": true, 
                "type": "ApplicationInputValue"
              }
            }
          }, 
          "ApplicationInputDetails": {
            "id": "ApplicationInputDetails", 
            "name": "", 
            "properties": {
              "argument": {
                "description": "The command line value of this input (ex -n, --name, -name, etc)", 
                "name": "argument", 
                "type": "string"
              }, 
              "description": {
                "description": "Description of this input.", 
                "name": "description", 
                "type": "string"
              }, 
              "label": {
                "description": "The label for this input", 
                "name": "label", 
                "type": "string"
              }, 
              "showArgument": {
                "description": "Whether the argument value should be passed into the wrapper at run time", 
                "name": "showArgument", 
                "type": "boolean"
              }
            }
          }, 
          "ApplicationInputOntology": {
            "id": "ApplicationInputOntology", 
            "name": "", 
            "properties": {
              "fileTypes": {
                "description": "The file types acceptable for this input.", 
                "items": {
                  "type": "string"
                }, 
                "name": "fileTypes", 
                "type": "array"
              }, 
              "minCardinality": {
                "description": "The minimum number of times this input may appear.", 
                "format": "int32", 
                "name": "minCardinality", 
                "type": "integer"
              }, 
              "ontology": {
                "items": {
                  "type": "string"
                }, 
                "name": "ontology", 
                "required": true, 
                "type": "array"
              }
            }
          }, 
          "ApplicationInputValue": {
            "id": "ApplicationInputValue", 
            "name": "", 
            "properties": {
              "defaultValue": {
                "description": "The default value for this parameter. The type will be determined by the value.type field.", 
                "name": "defaultValue", 
                "type": "string"
              }, 
              "order": {
                "description": "The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.", 
                "format": "int32", 
                "minimum": 0, 
                "name": "order", 
                "type": "integer"
              }, 
              "required": {
                "description": "Is this parameter required? If visible is false, this must be true.", 
                "name": "required", 
                "type": "boolean"
              }, 
              "validator": {
                "description": "The regular expression used to validate this parameter value. For enumerations, separate values with |", 
                "name": "validator", 
                "type": "string"
              }, 
              "visible": {
                "description": "Should this parameter be visible? If not, there must be a default and it will be required.", 
                "name": "visible", 
                "type": "boolean"
              }
            }
          }, 
          "ApplicationOperationRequest": {
            "id": "ApplicationOperationRequest", 
            "name": "", 
            "properties": {
              "action": {
                "description": "Action to perform on the file or folder.", 
                "enum": [
                  "publish", 
                  "clone"
                ], 
                "name": "action", 
                "required": true, 
                "type": "string"
              }, 
              "deploymentPath": {
                "description": "Path to the on cloned app's deployment folder on its storage system. Only used with the clone action.", 
                "name": "deploymentPath", 
                "type": "string"
              }, 
              "executionSystem": {
                "description": "System on which the clone apps should run. Only used with the clone action.", 
                "name": "executionSystem", 
                "type": "string"
              }, 
              "name": {
                "description": "Name of cloned app. Only used with the clone action.", 
                "name": "name", 
                "type": "string"
              }, 
              "storageSystem": {
                "description": "Storage system on which the cloned app's assets resides. Only used with the clone action.", 
                "name": "storageSystem", 
                "type": "string"
              }, 
              "version": {
                "description": "Version of the cloned app. Only used with the clone action.", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "ApplicationOutput": {
            "id": "ApplicationOutput", 
            "name": "", 
            "properties": {
              "details": {
                "description": "The details for this output. ", 
                "name": "details", 
                "required": true, 
                "type": "ApplicationParameterDetails"
              }, 
              "id": {
                "description": "The id of this output. This will be the replacement string in your wrapper scripts.", 
                "name": "id", 
                "required": true, 
                "type": "string"
              }, 
              "semantics": {
                "description": "The ontologies for this output. ", 
                "name": "semantics", 
                "required": true, 
                "type": "ApplicationOutputOntology"
              }, 
              "value": {
                "description": "The inputs files for this output. ", 
                "name": "value", 
                "required": true, 
                "type": "ApplicationParameterValue"
              }
            }
          }, 
          "ApplicationOutputOntology": {
            "id": "ApplicationOutputOntology", 
            "name": "", 
            "properties": {
              "fileTypes": {
                "description": "The file types acceptable for this output.", 
                "items": {
                  "type": "string"
                }, 
                "name": "fileTypes", 
                "type": "array"
              }, 
              "maxCardinality": {
                "description": "The maximum number of times this output may appear.", 
                "format": "int32", 
                "name": "maxCardinality", 
                "type": "integer"
              }, 
              "minCardinality": {
                "description": "The minimum number of times this output may appear.", 
                "format": "int32", 
                "name": "minCardinality", 
                "type": "integer"
              }, 
              "ontology": {
                "items": {
                  "type": "string"
                }, 
                "name": "ontology", 
                "type": "array"
              }
            }
          }, 
          "ApplicationParameter": {
            "id": "ApplicationParameter", 
            "name": "", 
            "properties": {
              "details": {
                "description": "The details for this parameter. ", 
                "name": "details", 
                "required": true, 
                "type": "ApplicationParameterDetails"
              }, 
              "id": {
                "description": "The id of this parameter. This will be the replacement string in your wrapper scripts.", 
                "name": "id", 
                "required": true, 
                "type": "string"
              }, 
              "semantics": {
                "description": "The ontologies for this parameter. ", 
                "name": "semantics", 
                "required": true, 
                "type": "ApplicationParameterOntology"
              }, 
              "value": {
                "description": "The inputs files for this parameter. ", 
                "name": "value", 
                "required": true, 
                "type": "ApplicationParameterValue"
              }
            }
          }, 
          "ApplicationParameterDetails": {
            "id": "ApplicationParameterDetails", 
            "name": "", 
            "properties": {
              "argument": {
                "description": "The command line value of this parameter (ex -n, --name, -name, etc)", 
                "name": "argument", 
                "type": "string"
              }, 
              "description": {
                "description": "Description of this parameter.", 
                "name": "description", 
                "type": "string"
              }, 
              "label": {
                "description": "The label for this parameter", 
                "name": "label", 
                "type": "string"
              }, 
              "showArgument": {
                "description": "Whether the argument value should be passed into the wrapper at run time", 
                "name": "showArgument", 
                "type": "boolean"
              }
            }
          }, 
          "ApplicationParameterOntology": {
            "id": "ApplicationParameterOntology", 
            "name": "", 
            "properties": {
              "ontology": {
                "items": {
                  "type": "string"
                }, 
                "name": "ontology", 
                "type": "array"
              }
            }
          }, 
          "ApplicationParameterValue": {
            "id": "ApplicationParameterValue", 
            "name": "", 
            "properties": {
              "defaultValue": {
                "description": "The default value for this parameter. The type will be determined by the value.type field.", 
                "name": "defaultValue", 
                "type": "string"
              }, 
              "enum_values": {
                "description": "An array of enumerated object values.", 
                "items": {
                  "type": "string"
                }, 
                "name": "enum_values", 
                "type": "array"
              }, 
              "order": {
                "description": "The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.", 
                "format": "int32", 
                "name": "order", 
                "type": "integer"
              }, 
              "required": {
                "description": "Is this parameter required? If visible is false, this must be true.", 
                "name": "required", 
                "type": "boolean"
              }, 
              "type": {
                "description": "The type of this parameter value.", 
                "enum": [
                  "string", 
                  "number", 
                  "enumeration", 
                  "bool", 
                  "flag"
                ], 
                "name": "type", 
                "required": true, 
                "type": "string"
              }, 
              "validator": {
                "description": "The regular expression used to validate this parameter value. For enumerations, separate values with |", 
                "name": "validator", 
                "type": "string"
              }, 
              "visible": {
                "description": "Should this parameter be visible? If not, there must be a default and it will be required.", 
                "name": "visible", 
                "type": "boolean"
              }
            }
          }, 
          "ApplicationPermission": {
            "id": "ApplicationPermission", 
            "name": "", 
            "properties": {
              "permission": {
                "name": "permission", 
                "type": "ACL"
              }, 
              "username": {
                "description": "Username associate with this permission", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "ApplicationPermissionRequest": {
            "id": "ApplicationPermissionRequest", 
            "name": "", 
            "properties": {
              "permission": {
                "description": "The permission to set", 
                "enum": [
                  "READ", 
                  "WRITE", 
                  "EXECUTE", 
                  "READ_WRITE", 
                  "READ_EXECUTE", 
                  "WRITE_EXECUTE", 
                  "ALL", 
                  "NONE"
                ], 
                "name": "permission", 
                "required": true, 
                "type": "string"
              }, 
              "username": {
                "description": "The username of the api user whose permission is to be set.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "ApplicationPermissionResponse": {
            "id": "ApplicationPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "An array of permission objects for this application.", 
                "items": {
                  "$ref": "ApplicationPermission"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ApplicationRequest": {
            "id": "ApplicationRequest", 
            "name": "", 
            "properties": {
              "available": {
                "description": "Whether the application is available.", 
                "name": "available", 
                "required": true, 
                "type": "boolean"
              }, 
              "checkpointable": {
                "description": "Whether the application supports checkpointing.", 
                "name": "checkpointable", 
                "type": "boolean"
              }, 
              "defaultMaxRunTime": {
                "description": "The max execution time that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultMaxRunTime", 
                "type": "int"
              }, 
              "defaultMemory": {
                "description": "The default memory in GB to pass to the scheduler if none is given in the job description. This must be less than the max memory parameter in the target queue definition.", 
                "name": "defaultMemory", 
                "type": "string"
              }, 
              "defaultNodeCount": {
                "description": "The number of nodes that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultNodeCount", 
                "type": "string"
              }, 
              "defaultProcessors": {
                "description": "The number of processors to pass to the scheduler if none are given in the job description. This must be 1 if the app is serial.", 
                "name": "defaultProcessors", 
                "type": "int"
              }, 
              "defaultQueue": {
                "description": "The queue on the execution system that should be used if none is given in a job description. Ignore if the system does not support schedulers.", 
                "name": "defaultQueue", 
                "type": "string"
              }, 
              "deploymentPath": {
                "description": "The location in the user's default storage system containing the application wrapper and dependencies.", 
                "name": "deploymentPath", 
                "required": true, 
                "type": "string"
              }, 
              "deploymentSystem": {
                "description": "The system id of the storage system where this app should run.", 
                "name": "deploymentSystem", 
                "required": true, 
                "type": "string"
              }, 
              "executionSystem": {
                "description": "The system id of the execution system where this app should run.", 
                "name": "executionSystem", 
                "required": true, 
                "type": "string"
              }, 
              "executionType": {
                "description": "The execution type of the application. If you're unsure, it's probably HPC.", 
                "enum": [
                  "ATMOSPHERE", 
                  "HPC", 
                  "CONDOR", 
                  "CLI"
                ], 
                "name": "executionType", 
                "required": true, 
                "type": "string"
              }, 
              "helpURI": {
                "description": "The URL where users can go for more information about the app.", 
                "name": "helpURI", 
                "type": "string"
              }, 
              "icon": {
                "description": "The icon to associate with this app.", 
                "name": "icon", 
                "type": "string"
              }, 
              "inputs": {
                "description": "The inputs files for this application. ", 
                "items": {
                  "$ref": "ApplicationInput"
                }, 
                "name": "inputs", 
                "required": true, 
                "type": "array"
              }, 
              "label": {
                "description": "The label to use when generating forms.", 
                "name": "label", 
                "type": "string"
              }, 
              "longDescription": {
                "description": "The full text description of this input to use when generating forms.", 
                "name": "longDescription", 
                "type": "string"
              }, 
              "modules": {
                "description": "An array of modules to load prior to the execution of the application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "modules", 
                "type": "array"
              }, 
              "name": {
                "description": "The name of the application. The name does not have to be unique, but the combination of name and version does.", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }, 
              "ontology": {
                "description": "An array of ontology values describing this application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "ontology", 
                "type": "array"
              }, 
              "outputs": {
                "description": "The outputs files for this application. ", 
                "items": {
                  "$ref": "ApplicationOutput"
                }, 
                "name": "outputs", 
                "type": "array"
              }, 
              "parallelism": {
                "description": "The parallelism type of the application. If you're unsure, it's probably SERIAL.", 
                "enum": [
                  "SERIAL", 
                  "PARALLEL", 
                  "PTHREAD"
                ], 
                "name": "parallelism", 
                "type": "string"
              }, 
              "parameters": {
                "description": "The inputs parameters for this application. ", 
                "items": {
                  "$ref": "ApplicationParameter"
                }, 
                "name": "parameters", 
                "required": true, 
                "type": "array"
              }, 
              "shortDescription": {
                "description": "The short description of this application.", 
                "name": "shortDescription", 
                "type": "string"
              }, 
              "tags": {
                "description": "An array of tags related to this application.", 
                "items": {
                  "type": "string"
                }, 
                "name": "tags", 
                "type": "array"
              }, 
              "templatePath": {
                "description": "The path to the wrapper script relative to the deploymentPath.", 
                "name": "templatePath", 
                "required": true, 
                "type": "string"
              }, 
              "testPath": {
                "description": "The path to the test script relative to the deploymentPath.", 
                "name": "testPath", 
                "required": true, 
                "type": "string"
              }, 
              "version": {
                "description": "The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.", 
                "name": "version", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "ApplicationSummary": {
            "id": "ApplicationSummary", 
            "name": "", 
            "properties": {
              "executionSystem": {
                "description": "The system id of the execution system where this app should run.", 
                "name": "executionSystem", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique id of this app. Comprised of the app name-version.", 
                "name": "id", 
                "type": "string"
              }, 
              "isPublic": {
                "description": "Whether the application is public or private.", 
                "name": "isPublic", 
                "type": "boolean"
              }, 
              "lastModified": {
                "description": "The date this application was last modified in ISO 8601 format.", 
                "format": "date-time", 
                "name": "lastModified", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the application. The name does not have to be unique, but the combination of name and version does.", 
                "name": "name", 
                "type": "string"
              }, 
              "revision": {
                "description": "The number of times this application has been revised.", 
                "format": "int32", 
                "name": "revision", 
                "type": "integer"
              }, 
              "shortDescription": {
                "description": "The short description of this application.", 
                "name": "shortDescription", 
                "type": "string"
              }, 
              "version": {
                "description": "The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "EmptyApplicationResponse": {
            "id": "EmptyApplicationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "empty result", 
                "name": "result", 
                "type": "string"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleApplicationResponse": {
            "id": "MultipleApplicationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "ApplicationSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleApplicationResponse": {
            "id": "SingleApplicationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Application"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "produces": [
          "application/json"
        ], 
        "resourcePath": "/apps/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Register and manage apps", 
      "name": "apps", 
      "path": "/apps", 
      "url": "http://localhost:9999/apps"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Manage files and folders", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "downloadFromDefaultSystem", 
                "notes": "This will return the raw file from the user's default storage location.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "sourcefilePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "produces": [
                  "application/octet-stream"
                ], 
                "summary": "Download a file from the user's default storage location.", 
                "type": "void"
              }, 
              {
                "consumes": [
                  "multipart/form-data"
                ], 
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "importToDefaultSystem", 
                "notes": "This will return a handle to the file upload.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "sourcefilePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The file format this file is in. Defaults to raw. This will be used in file transform operations.", 
                    "name": "fileType", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The URI to notify when the import is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}", 
                    "name": "callbackURL", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The name of the file after importing. If not specified, the uploaded file name will be used.", 
                    "name": "fileName", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The URL to import the file from. This parameter is used if not file is uploaded with this post.", 
                    "name": "urlToIngest", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "dataType": "file", 
                    "description": "The file object to import.", 
                    "name": "fileToUpload", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "void"
                  }
                ], 
                "summary": "Import a file via direct upload or importing from a url to the user's default storage location.", 
                "type": "SingleRemoteFileResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "manageOnDefaultSystem", 
                "notes": "This will return a handle to the file upload.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "sourcefilePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"action\":\"mkdir\",\n\t\"path\": \"deleteme\"\n}", 
                    "description": "The operation to perform. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "FileOperationRequest"
                  }
                ], 
                "summary": "Perform an action on a file or folder.", 
                "type": "EmptyRemoteFileResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteFromDefaultSystem", 
                "notes": "This will delete the file or folder at the given path from the user's default storage location.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "sourcefilePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes a file or folder.", 
                "type": "EmptyRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/media/{sourcefilePath}"
          }, 
          {
            "description": "Manage files and folders on a specific system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "download", 
                "notes": "This will return the raw file from the user's default storage location.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "produces": [
                  "application/octet-stream"
                ], 
                "summary": "Download a file from the user's default storage location.", 
                "type": "void"
              }, 
              {
                "consumes": [
                  "multipart/form-data"
                ], 
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "importData", 
                "notes": "This will return a handle to the file upload.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The file format this file is in. Defaults to raw. This will be used in file transform operations.", 
                    "name": "fileType", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The URI to notify when the import is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}", 
                    "name": "callbackURL", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The name of the file after importing. If not specified, the uploaded file name will be used.", 
                    "name": "fileName", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The URL to import the file from. This parameter is used if not file is uploaded with this post.", 
                    "name": "urlToIngest", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "dataType": "file", 
                    "description": "The file object to import.", 
                    "name": "fileToUpload", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "void"
                  }, 
                  {
                    "allowMultiple": true, 
                    "defaultValue": "[]", 
                    "description": "A list of notification objects to apply to the transfer. ", 
                    "name": "notifications", 
                    "paramType": "form", 
                    "required": false, 
                    "type": "FileNotificationRequest"
                  }
                ], 
                "summary": "Import a file via direct upload or importing from a url to the user's default storage location.", 
                "type": "SingleRemoteFileResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "manage", 
                "notes": "This will return a handle to the file upload.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"action\":\"mkdir\",\n\t\"dirName\": \"deleteme\"\n}", 
                    "description": "The operation to perform. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "FileOperationRequest"
                  }
                ], 
                "summary": "Perform an action on a file or folder.", 
                "type": "EmptyRemoteFileResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "This will delete the file or folder at the given path from the user's default storage location.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes a file or folder.", 
                "type": "EmptyRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/media/system/{systemId}/{filePath}"
          }, 
          {
            "description": "Obtain remote directory listings.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listOnDefaultSystem", 
                "notes": "This will return the a directory listing or information about a single file if the path is not a directory.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a remote directory listing.", 
                "type": "MultipleRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/listings/{filePath}"
          }, 
          {
            "description": "Obtian remote directory listings.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "This will return the a directory listing or information about a single file if the path is not a directory.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a remote directory listing on a specific system.", 
                "type": "MultipleRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/listings/system/{systemId}/{filePath}"
          }, 
          {
            "description": "View history of api actions on this file/folder", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getHistoryOnDefaultSystem", 
                "notes": "This will return the raw file from the user's default storage location.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Download a file from the user's default storage location.", 
                "type": "FileHistoryResponse"
              }
            ], 
            "path": "/files/v2/history/{filePath}"
          }, 
          {
            "description": "View history of api actions on this file/folder", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getHistory", 
                "notes": "This will return history of api actions on this file/folder.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the given system root location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Return history of api actions.", 
                "type": "FileHistoryResponse"
              }
            ], 
            "path": "/files/v2/history/system/{systemId}/{filePath}"
          }, 
          {
            "description": "Manage share permissions on files and folders", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissionsOnDefaultSystem", 
                "notes": "You must have read permission on this file or folder to call this endpoint", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "List all the share permissions for a file or folder.", 
                "type": "MultiplePermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updatePermissionsOnDefaultSystem", 
                "notes": "Due to the nature of the underlying file system, permissions are autonomous. READ and WRITE are exclusive. ALL implies ownership. If you want someone to be able to see and edit a document, give them all=true permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ_EXECUTE\",\n\t\"recursive\": false\n}", 
                    "description": "The permission add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "FilePermissionRequest"
                  }
                ], 
                "summary": "Update permissions for a single user.", 
                "type": "EmptyRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/pems/{filePath}"
          }, 
          {
            "description": "Manage share permissions on files and folders", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissions", 
                "notes": "You must have read permission on this file or folder to call this endpoint", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "List all the share permissions for a file or folder.", 
                "type": "MultiplePermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updatePermissions", 
                "notes": "Due to the nature of the underlying file system, permissions are autonomous. READ and WRITE are exclusive. ALL implies ownership. If you want someone to be able to see and edit a document, give them all=true permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ_EXECUTE\",\n\t\"recursive\": false\n}", 
                    "description": "The permission add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "FilePermissionRequest"
                  }
                ], 
                "summary": "Update permissions for a single user.", 
                "type": "MultiplePermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deletePermissions", 
                "notes": "Once applied, users will not be able to view or edit these files anymore. Keep this in mind before calling this on data referenced by shared applications.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The path of the file relative to the user's default storage location.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system on which the data resides.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all permissions on a file except those of the owner.", 
                "type": "EmptyRemoteFileResponse"
              }
            ], 
            "path": "/files/v2/pems/system/{systemId}/{filePath}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "EmptyRemoteFileResponse": {
            "id": "EmptyRemoteFileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "empty result", 
                "name": "result", 
                "type": "string"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "FileHistory": {
            "id": "FileHistory", 
            "name": "", 
            "properties": {
              "created": {
                "description": "The date of the event.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "description": {
                "description": "A brief description of the event details.", 
                "name": "description", 
                "type": "String"
              }, 
              "status": {
                "description": "The status of the file/folder after this event.", 
                "name": "status", 
                "type": "String"
              }
            }
          }, 
          "FileHistoryResponse": {
            "id": "FileHistoryResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "FileHistory"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "FileNotificationRequest": {
            "id": "FileNotificationRequest", 
            "name": "", 
            "properties": {
              "event": {
                "description": "The event you wish to recieve a notification about. Specify * for all events.", 
                "name": "event", 
                "type": "string"
              }, 
              "persistent": {
                "description": "Whether this event should remain active after it triggers the first time.", 
                "name": "persistent", 
                "type": "boolean"
              }, 
              "url": {
                "description": "The URI to notify when the import is complete. This can be an email address or URL. If a URL is given, a POST will be made to this address. URL templating is supported. Valid template values are: ${JOB_STATUS}, ${JOB_URL}, ${JOB_ID}, ${JOB_SYSTEM}, ${JOB_NAME}, ${JOB_START_TIME}, ${JOB_END_TIME}, ${JOB_SUBMIT_TIME}, ${JOB_ARCHIVE_PATH}, ${JOB_ARCHIVE_URL}, ${JOB_ERROR}", 
                "format": "int32", 
                "name": "url", 
                "type": "integer"
              }
            }
          }, 
          "FileOperationRequest": {
            "id": "FileOperationRequest", 
            "name": "", 
            "properties": {
              "action": {
                "description": "Action to perform on the file or folder.", 
                "enum": [
                  "mkdir", 
                  "rename", 
                  "copy", 
                  "move"
                ], 
                "name": "action", 
                "required": true, 
                "type": "string"
              }, 
              "path": {
                "description": "Destination file or folder.", 
                "name": "path", 
                "type": "string"
              }
            }
          }, 
          "FilePermission": {
            "id": "FilePermission", 
            "name": "", 
            "properties": {
              "name": {
                "description": "The name of the file/folder.", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "Local username of the owner.", 
                "name": "owner", 
                "type": "string"
              }, 
              "permissions": {
                "description": "One or more permission objects", 
                "items": {
                  "$ref": "Permission"
                }, 
                "name": "permissions", 
                "type": "array"
              }
            }
          }, 
          "FilePermissionRequest": {
            "id": "FilePermissionRequest", 
            "name": "", 
            "properties": {
              "permission": {
                "description": "The permission to set", 
                "enum": [
                  "READ", 
                  "WRITE", 
                  "EXECUTE", 
                  "READ_WRITE", 
                  "READ_EXECUTE", 
                  "WRITE_EXECUTE", 
                  "ALL", 
                  "NONE"
                ], 
                "name": "permission", 
                "required": true, 
                "type": "string"
              }, 
              "recursive": {
                "description": "Should updated permissions be applied recursively. Defaults to false.", 
                "name": "recursive", 
                "type": "boolean"
              }, 
              "username": {
                "description": "The username of the api user whose permission is to be set.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MultiplePermissionResponse": {
            "id": "MultiplePermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "One or more file permissions", 
                "items": {
                  "$ref": "FilePermission"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleRemoteFileResponse": {
            "id": "MultipleRemoteFileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "RemoteFile"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Permission": {
            "id": "Permission", 
            "name": "", 
            "properties": {
              "permission": {
                "description": "One or more permission objects", 
                "name": "permission", 
                "type": "PermissionStanza"
              }, 
              "username": {
                "description": "The name of the user for this permission object.", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "PermissionStanza": {
            "id": "PermissionStanza", 
            "name": "", 
            "properties": {
              "execute": {
                "description": "Is the file executable", 
                "name": "execute", 
                "type": "boolean"
              }, 
              "read": {
                "description": "Is the file readable", 
                "name": "read", 
                "type": "boolean"
              }, 
              "write": {
                "description": "Is the file writable", 
                "name": "write", 
                "type": "boolean"
              }
            }
          }, 
          "RemoteFile": {
            "id": "RemoteFile", 
            "name": "", 
            "properties": {
              "format": {
                "description": "The file type of the file.", 
                "name": "format", 
                "type": "string"
              }, 
              "lastModified": {
                "description": "The date this file was last modified in ISO 8601 format.", 
                "format": "date-time", 
                "name": "lastModified", 
                "type": "string"
              }, 
              "length": {
                "description": "The length of the file/folder.", 
                "format": "int32", 
                "name": "length", 
                "type": "integer"
              }, 
              "mimeType": {
                "description": "The mime type of the file/folder. If unknown, it defaults to application/binary.", 
                "name": "mimeType", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the file/folder.", 
                "name": "name", 
                "type": "string"
              }, 
              "path": {
                "description": "The absolute path to the file/folder.", 
                "name": "path", 
                "type": "string"
              }, 
              "permissions": {
                "description": "The system permission of the invoking user on the file/folder.", 
                "name": "permissions", 
                "type": "string"
              }, 
              "system": {
                "description": "The systemId of the system where this file lives.", 
                "name": "system", 
                "type": "string"
              }, 
              "type": {
                "description": "Whether it is a file or folder.", 
                "name": "type", 
                "type": "string"
              }
            }
          }, 
          "SingleRemoteFileResponse": {
            "id": "SingleRemoteFileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "RemoteFile"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/files/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Move and manage data", 
      "name": "files", 
      "path": "/files", 
      "url": "http://localhost:9999/files"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Submit a new job request.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "All jobs both private and shared that are associated with a user.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of jobs the authenticated user had submitted.", 
                "type": "MultipleJobResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "submit", 
                "notes": "This is the sole point of submission for new jobs. Users must have permissions both on the app, execution host, and storage host to submit a job. Job requests are processed immediatly, however the actualy submission and execution happen asynchronously, so users are highly encouraged to leverage the callbackUrl parameter to receive notification of updates rather than polling.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\":\"wc-demo\",\n\t\"appId\":\"wc-demo-1.00\",\n\t\"memoryPerNode\":1,\n\t\"notifications\":[\n\t\t{\n\t\t\t\"url\":\"nryan@mlb.com\",\n\t\t\t\"event\":\"FINISHED\"\n\t\t}\n\t],\n\t\"inputs\":{\n\t\t\"query1\":\"agave://demo.storage.example.com/apps/wc-1.00/picksumipsum.txt\"\n\t}\n}", 
                    "description": "The description of the job to submit. This can be either a file upload or json posted to the request body.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "JobRequest"
                  }
                ], 
                "summary": "Submit a new job request.", 
                "type": "SingleJobResponse"
              }
            ], 
            "path": "/jobs/v2/"
          }, 
          {
            "description": "Get specific job details", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "format": "int32", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Get details of the job with the specific job id.", 
                "type": "SingleJobResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "manage", 
                "notes": "Using this method, users can stop a job that is currently running or resumbit the job for re-execution. If resubmitted, a new job will be created with the exact same inputs.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"action\":\"stop\"\n}", 
                    "description": "The operation to perform.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "JobOperationRequest"
                  }
                ], 
                "summary": "Perform an action on a job.", 
                "type": "SingleJobResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "The job will be removed from the user's job history and will no longer show up in listing requests. Any archived data associated with this job will be unaffected. Once deleted, there is no way to recover the deleted job.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes a job from the user's history.", 
                "type": "EmptyJobResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}"
          }, 
          {
            "description": "Get detailed job history containing every event in its history.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getHistory", 
                "notes": "Users must have read access to this job to view the history.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get the history of this job.", 
                "type": "JobHistoryResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}/history"
          }, 
          {
            "description": "Get job permission details", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissions", 
                "notes": "Users must have read access to this job to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get the permission ACL for this job.", 
                "type": "JobPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updatePermissions", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ\"\n}", 
                    "description": "The permission add or update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "JobPermissionRequest"
                  }
                ], 
                "summary": "Add or update a user's permission for an application.", 
                "type": "EmptyJobResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deletePermissions", 
                "notes": "This will reset the permissions such that only the user who submitted the job will be able to view it. Job owners cannot remove their own permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all permissions on an job.", 
                "type": "EmptyJobResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}/pems"
          }, 
          {
            "description": "Get job permission details for a specific user.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listPermissionsForUser", 
                "notes": "Users must have read access to this job to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission.", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a specific user's permissions for a job.", 
                "type": "JobPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updatePermissionsForUser", 
                "notes": "To delete a single user, use the DELETE operation or set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ_EXECUTE\",\n\t\"recursive\": false\n}", 
                    "description": "The permission to update. ", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "JobPermissionRequest"
                  }
                ], 
                "summary": "Add or update a user's permission for an job.", 
                "type": "EmptyJobResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deletePermissionsForUser", 
                "notes": "This will remove all permissions on an job for a user. Job owners cannot remote their own permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the application. The application id is made up of the name and version separated by a dash.", 
                    "name": "uniqueName", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the permission", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all permissions for the given user on an job.", 
                "type": "EmptyApplicationResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}/pems/{username}"
          }, 
          {
            "description": "Return just the status of the job", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getStatus", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Get the status of the job.", 
                "type": "JobStatusResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}/status"
          }, 
          {
            "description": "Return a listing of the output folder from the job.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listOutputs", 
                "notes": "If issued against an un-archived job, inputs and intermediate files will also be visible and accesible.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "List contents of a job's output directory.", 
                "type": "MultipleRemoteFileResponse"
              }
            ], 
            "path": "/jobs/v2/{jobId}/outputs/listings/{filePath}"
          }, 
          {
            "description": "Download an output file.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "downloadOutput", 
                "notes": "This service will follow data around as it moves from the execution system to archival storage. You can use this endpoint to keep a permanent handle of the output of a job. Directory download is not currently supported.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the job.", 
                    "name": "jobId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Path to an output file relative to the job output directory.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "produces": [
                  "application/octet-stream"
                ], 
                "summary": "Download an output file from a specific job.", 
                "type": "JobOutputFileDownload"
              }
            ], 
            "path": "/jobs/v2/{jobId}/outputs/media/{filePath}"
          }, 
          {
            "description": "Search for jobs matching given attribute/value combination(s).", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "search", 
                "notes": "Search by combinations of attributes and values. The URL should be constructed with alternating attribute and value fields.", 
                "parameters": [
                  {
                    "allowMultiple": true, 
                    "description": "The attribute to query by. This can be any job field.", 
                    "name": "attribute", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": true, 
                    "description": "The value of the attribute to query for.", 
                    "name": "value", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Find jobs matching the given attribute/value combination(s).", 
                "type": "MultipleJobResponse"
              }
            ], 
            "path": "/jobs/v2/{attribute}/{value}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "ACL": {
            "id": "ACL", 
            "name": "", 
            "properties": {
              "read": {
                "description": "can read", 
                "name": "read", 
                "type": "boolean"
              }, 
              "write": {
                "description": "can write", 
                "name": "write", 
                "type": "boolean"
              }
            }
          }, 
          "EmptyJobResponse": {
            "id": "EmptyJobResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "empty result", 
                "name": "result", 
                "type": "string"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Job": {
            "id": "Job", 
            "name": "", 
            "properties": {
              "appId": {
                "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.", 
                "name": "appId", 
                "type": "string"
              }, 
              "archive": {
                "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.", 
                "name": "archive", 
                "type": "boolean"
              }, 
              "archivePath": {
                "description": "The path of the archive folder for this job on the user's default storage sytem.", 
                "name": "archivePath", 
                "type": "string"
              }, 
              "archiveSystem": {
                "description": "The unique id of the storage system on which this job's output will be staged.", 
                "name": "archiveSystem", 
                "type": "string"
              }, 
              "batchQueue": {
                "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.", 
                "name": "batchQueue", 
                "type": "string"
              }, 
              "endTime": {
                "description": "The date the job stopped running due to termination, completion, or error in ISO 8601 format.", 
                "format": "date-time", 
                "name": "endTime", 
                "type": "string"
              }, 
              "executionSystem": {
                "description": "The system id of the execution system.", 
                "name": "executionSystem", 
                "type": "string"
              }, 
              "id": {
                "description": "The unique id of the job.", 
                "name": "id", 
                "type": "string"
              }, 
              "inputs": {
                "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.", 
                "name": "inputs", 
                "type": "JobInputs"
              }, 
              "localId": {
                "description": "The process or local job id of the job on the remote execution system.", 
                "name": "localId", 
                "type": "string"
              }, 
              "maxRunTime": {
                "description": "The requested compute time needed for this application to complete given in HH:mm:ss format.", 
                "name": "maxRunTime", 
                "type": "string"
              }, 
              "memoryPerNode": {
                "description": "The requested memory for this application to run given in GB.", 
                "name": "memoryPerNode", 
                "type": "string"
              }, 
              "message": {
                "description": "The error message incurred when the job failed.", 
                "name": "message", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the job.", 
                "name": "name", 
                "type": "string"
              }, 
              "nodeCount": {
                "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.", 
                "format": "int32", 
                "name": "nodeCount", 
                "type": "integer"
              }, 
              "notifications": {
                "description": "An array of notifications you wish to receive.", 
                "items": {
                  "$ref": "Notification"
                }, 
                "name": "notifications", 
                "type": "array"
              }, 
              "outputPath": {
                "description": "Relative path of the job's output data.", 
                "name": "outputPath", 
                "type": "String"
              }, 
              "owner": {
                "description": "The job owner.", 
                "name": "owner", 
                "type": "string"
              }, 
              "parameters": {
                "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.", 
                "name": "parameters", 
                "type": "JobParameters"
              }, 
              "processorsPerNode": {
                "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.", 
                "format": "int32", 
                "name": "processorsPerNode", 
                "type": "integer"
              }, 
              "retries": {
                "description": "The number of retires it took to submit this job.", 
                "format": "int32", 
                "name": "retries", 
                "type": "integer"
              }, 
              "startTime": {
                "description": "The date the job started in ISO 8601 format.", 
                "format": "date-time", 
                "name": "startTime", 
                "type": "string"
              }, 
              "status": {
                "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED", 
                "name": "status", 
                "type": "string"
              }, 
              "submitTime": {
                "description": "The date the job was submitted in ISO 8601 format.", 
                "format": "date-time", 
                "name": "submitTime", 
                "type": "string"
              }, 
              "workPath": {
                "description": "The directory on the remote execution system from which the job is running.", 
                "name": "workPath", 
                "type": "string"
              }
            }
          }, 
          "JobHistory": {
            "id": "JobHistory", 
            "name": "", 
            "properties": {
              "created": {
                "description": "The date of the event.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "description": {
                "description": "A brief description of the event details.", 
                "name": "description", 
                "type": "String"
              }, 
              "status": {
                "description": "The status of the job after this event.", 
                "name": "status", 
                "type": "String"
              }
            }
          }, 
          "JobHistoryResponse": {
            "id": "JobHistoryResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "JobHistory"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "JobInputs": {
            "id": "JobInputs", 
            "name": "", 
            "properties": {
              "parameter1": {
                "description": "One or more inputs identified in the description of the app you're running. ", 
                "name": "parameter1", 
                "required": false, 
                "type": "string"
              }
            }
          }, 
          "JobOperationRequest": {
            "id": "JobOperationRequest", 
            "name": "", 
            "properties": {
              "action": {
                "description": "Action to perform on the job.", 
                "enum": [
                  "resubmit", 
                  "stop"
                ], 
                "name": "action", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "JobOutputFileDownload": {
            "id": "JobOutputFileDownload", 
            "name": "", 
            "properties": {}
          }, 
          "JobParameters": {
            "id": "JobParameters", 
            "name": "", 
            "properties": {
              "parameter1": {
                "description": "One or more parameters identified in the description of the app you're running. ", 
                "name": "parameter1", 
                "required": false, 
                "type": "string"
              }
            }
          }, 
          "JobPermissionRequest": {
            "id": "JobPermissionRequest", 
            "name": "", 
            "properties": {
              "permission": {
                "description": "The permission to set", 
                "enum": [
                  "READ", 
                  "WRITE", 
                  "EXECUTE", 
                  "READ_WRITE", 
                  "READ_EXECUTE", 
                  "WRITE_EXECUTE", 
                  "ALL", 
                  "NONE"
                ], 
                "name": "permission", 
                "required": true, 
                "type": "string"
              }, 
              "username": {
                "description": "The username of the api user whose permission is to be set.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "JobPermissionResponse": {
            "id": "JobPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Permission"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "JobRequest": {
            "id": "JobRequest", 
            "name": "", 
            "properties": {
              "appId": {
                "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.", 
                "name": "appId", 
                "required": true, 
                "type": "string"
              }, 
              "archive": {
                "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.", 
                "name": "archive", 
                "required": true, 
                "type": "boolean"
              }, 
              "archivePath": {
                "description": "The path of the archive folder for this job on the user's default storage sytem.", 
                "name": "archivePath", 
                "type": "string"
              }, 
              "archiveSystem": {
                "description": "The unique id of the storage system on which this job's output will be staged.", 
                "name": "archiveSystem", 
                "type": "string"
              }, 
              "batchQueue": {
                "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.", 
                "name": "batchQueue", 
                "type": "string"
              }, 
              "inputs": {
                "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.", 
                "name": "inputs", 
                "required": true, 
                "type": "JobInputs"
              }, 
              "maxRunTime": {
                "description": "The requested compute time needed for this application to complete given in HH:mm:ss format.", 
                "name": "maxRunTime", 
                "type": "string"
              }, 
              "memoryPerNode": {
                "description": "The requested memory for this application to run given in GB.", 
                "name": "memoryPerNode", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the job.", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }, 
              "nodeCount": {
                "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.", 
                "format": "int32", 
                "name": "nodeCount", 
                "type": "integer"
              }, 
              "notifications": {
                "description": "An array of notifications you wish to receive.", 
                "items": {
                  "$ref": "Notification"
                }, 
                "name": "notifications", 
                "type": "array"
              }, 
              "parameters": {
                "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.", 
                "name": "parameters", 
                "required": true, 
                "type": "JobParameters"
              }, 
              "processorsPerNode": {
                "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.", 
                "format": "int32", 
                "minimum": 1, 
                "name": "processorsPerNode", 
                "type": "integer"
              }
            }
          }, 
          "JobStatus": {
            "id": "JobStatus", 
            "name": "", 
            "properties": {
              "id": {
                "description": "The unique id of the job.", 
                "name": "id", 
                "type": "string"
              }, 
              "status": {
                "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "JobStatusResponse": {
            "id": "JobStatusResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "name": "result", 
                "type": "JobStatus"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "JobSubmission": {
            "id": "JobSubmission", 
            "name": "", 
            "properties": {
              "appId": {
                "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.", 
                "name": "appId", 
                "type": "string"
              }, 
              "archive": {
                "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.", 
                "name": "archive", 
                "type": "boolean"
              }, 
              "archivePath": {
                "description": "The path of the archive folder for this job on the archiveSystem. Defaults to the user's default storage system.", 
                "name": "archivePath", 
                "type": "string"
              }, 
              "archiveSystem": {
                "description": "The system on which the job data will be archived", 
                "name": "archiveSystem", 
                "type": "string"
              }, 
              "batchQueue": {
                "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.", 
                "name": "batchQueue", 
                "type": "string"
              }, 
              "inputs": {
                "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.", 
                "name": "inputs", 
                "type": "JobInputs"
              }, 
              "maxMemory": {
                "description": "The maximum amount of memory needed for this application to run given in GB.", 
                "name": "maxMemory", 
                "type": "string"
              }, 
              "maxRunTime": {
                "description": "The estimated compute time needed for this application to complete given in hh:mm:ss format.", 
                "name": "maxRunTime", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the job.", 
                "name": "name", 
                "type": "string"
              }, 
              "nodeCount": {
                "description": "The number of nodes this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.", 
                "format": "int32", 
                "minimum": 1, 
                "name": "nodeCount", 
                "type": "integer"
              }, 
              "notifications": {
                "description": "An array of notifications you wish to receive.", 
                "items": {
                  "$ref": "Notification"
                }, 
                "name": "notifications", 
                "type": "array"
              }, 
              "parameters": {
                "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.", 
                "name": "parameters", 
                "type": "JobParameters"
              }, 
              "processorsPerNode": {
                "description": "The number of processors this application should utilize while running.", 
                "format": "int32", 
                "minimum": 1, 
                "name": "processorsPerNode", 
                "type": "integer"
              }
            }
          }, 
          "JobSummary": {
            "id": "JobSummary", 
            "name": "", 
            "properties": {
              "appId": {
                "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.", 
                "name": "appId", 
                "type": "string"
              }, 
              "endTime": {
                "description": "The date the job ended in ISO 8601 format.", 
                "format": "date-time", 
                "name": "endTime", 
                "type": "string"
              }, 
              "executionSystem": {
                "description": "The system id of the execution system.", 
                "name": "executionSystem", 
                "type": "string"
              }, 
              "id": {
                "description": "The unique id of the job.", 
                "name": "id", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the job.", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "The job owner.", 
                "name": "owner", 
                "type": "string"
              }, 
              "startTime": {
                "description": "The date the job started in ISO 8601 format.", 
                "format": "date-time", 
                "name": "startTime", 
                "type": "string"
              }, 
              "status": {
                "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleJobResponse": {
            "id": "MultipleJobResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "JobSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleRemoteFileResponse": {
            "id": "MultipleRemoteFileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "RemoteFile"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Notification": {
            "id": "Notification", 
            "name": "", 
            "properties": {
              "event": {
                "description": "The event you wish to recieve a notification about. Specify * for all events.", 
                "name": "event", 
                "type": "string"
              }, 
              "persistent": {
                "description": "Whether this event should remain active after it triggers the first time.", 
                "name": "persistent", 
                "type": "boolean"
              }, 
              "url": {
                "description": "The URI to notify when the import is complete. This can be an email address or URL. If a URL is given, a POST will be made to this address. URL templating is supported. Valid template values are: ${JOB_STATUS}, ${JOB_URL}, ${JOB_ID}, ${JOB_SYSTEM}, ${JOB_NAME}, ${JOB_START_TIME}, ${JOB_END_TIME}, ${JOB_SUBMIT_TIME}, ${JOB_ARCHIVE_PATH}, ${JOB_ARCHIVE_URL}, ${JOB_ERROR}", 
                "format": "int32", 
                "name": "url", 
                "type": "integer"
              }
            }
          }, 
          "Permission": {
            "id": "Permission", 
            "name": "", 
            "properties": {
              "permission": {
                "name": "permission", 
                "type": "ACL"
              }, 
              "username": {
                "description": "Username associate with this permission", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "PermissionListing": {
            "id": "PermissionListing", 
            "name": "", 
            "properties": {
              "name": {
                "description": "Unique name of the application to which this permissions apply.", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "Owner of the application.", 
                "name": "owner", 
                "type": "string"
              }, 
              "permissions": {
                "description": "Permissions granted on this application.", 
                "items": {
                  "$ref": "Permission"
                }, 
                "name": "permissions", 
                "type": "array"
              }
            }
          }, 
          "RemoteFile": {
            "id": "RemoteFile", 
            "name": "", 
            "properties": {
              "format": {
                "description": "The file type of the file.", 
                "name": "format", 
                "type": "string"
              }, 
              "lastModified": {
                "description": "The date this file was last modified in ISO 8601 format.", 
                "format": "date-time", 
                "name": "lastModified", 
                "type": "string"
              }, 
              "length": {
                "description": "The length of the file/folder.", 
                "format": "int32", 
                "name": "length", 
                "type": "integer"
              }, 
              "mimeType": {
                "description": "The mime type of the file/folder. If unknown, it defaults to application/binary.", 
                "name": "mimeType", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of the file/folder.", 
                "name": "name", 
                "type": "string"
              }, 
              "path": {
                "description": "The absolute path to the file/folder.", 
                "name": "path", 
                "type": "string"
              }, 
              "permissions": {
                "description": "The system permission of the invoking user on the file/folder.", 
                "name": "permissions", 
                "type": "string"
              }, 
              "system": {
                "description": "The systemId of the system where this file lives.", 
                "name": "system", 
                "type": "string"
              }, 
              "type": {
                "description": "Whether it is a file or folder.", 
                "name": "type", 
                "type": "string"
              }
            }
          }, 
          "SingleJobResponse": {
            "id": "SingleJobResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Job"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/jobs/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Run and manage jobs", 
      "name": "jobs", 
      "path": "/jobs", 
      "url": "http://localhost:9999/jobs"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Search and manage metadata resources", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listMetadata", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The query to perform. Traditional MongoDB queries are supported", 
                    "name": "q", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "defaultValue": true, 
                    "description": "If false, implicit permissions are ignored and only records to which the user has explicit permissions are returned", 
                    "name": "privileged", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID or supplies an invalid JSON query"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified metadata cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "List and/or search metadata.", 
                "type": "MultipleMetadataResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addMetadata", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\": \"color\",\n\t\"value\": \"blue\"\n\t\"schemaId\": null,\n\t\"associatedIds\": []\n}", 
                    "description": "The metadata to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Update or Add new Metadata.", 
                "type": "MetadataResponse"
              }
            ], 
            "path": "/meta/v2/data"
          }, 
          {
            "description": "Query for the metadata with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getMetadata", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified metadata cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Retrieve Metadata.", 
                "type": "MetadataResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateMetadata", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"name\": \"color\",\n\t\"value\": \"blue\"\n\t\"schemaId\": null,\n\t\"associatedIds\": []\n}", 
                    "description": "The metadata to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Update or Add new Metadata.", 
                "type": "MetadataResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteMetadata", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies no UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Remove Metadata from the system.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/data/{uuid}"
          }, 
          {
            "description": "Operations on schemata.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "searchSchema", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a Schema UUID"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the schema database"
                  }
                ], 
                "summary": "Retrieve Metadata Schemata.", 
                "type": "MetadataSchemaResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addSchema", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\t\"title\": \"profile\",\n\t\t\"type\" : \"object\",\n\t\t\"properties\": {\n\t\t\t\"firstName\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"lastName\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"city\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"state\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"email\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"team\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"position\": {\n\t\t\t\t\"enum\": [ \n\t\t\t\t\t\t\"pitcher\",\n\t\t\t\t\t\t\"catcher\",\n\t\t\t\t\t\t\"first\",\n\t\t\t\t\t\t\"second\",\n\t\t\t\t\t\t\"third\",\n\t\t\t\t\t\t\"shortstop\",\n\t\t\t\t\t\t\"left\",\n\t\t\t\t\t\t\"right\",\n\t\t\t\t\t\t\"center\",\n\t\t\t\t\t\t\"manager\"\n\t\t\t\t\t] \n\t\t\t},\n\t\t\t\"wins\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"losses\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"era\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"so\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"ip\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"games\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"ba\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"hr\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"hits\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"runs\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"slg\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"obp\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"status\": {\n\t\t\t\t\t\"enum\": [ \n\t\t\t\t\t\t\"active\",\n\t\t\t\t\t\t\"retired\",\n\t\t\t\t\t\t\"disabled\",\n\t\t\t\t\t\t\"banned\"\n\t\t\t\t\t] \n\t\t\t}\n\t\t},\n\t\t\"required\" : [ \n\t\t\t\"firstName\", \n\t\t\t\"lastName\", \n\t\t\t\"email\",\n\t\t\t\"position\"\n\t\t]\n}", 
                    "description": "A valid JSON Schema object", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form or JSON schema"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the schema database"
                  }
                ], 
                "summary": "Add a new Metadata Schema.", 
                "type": "MetadataSchemaResponse"
              }
            ], 
            "path": "/meta/v2/schemas"
          }, 
          {
            "description": "Operations on metadata schema.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getSchema", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a Schema UUID"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the schema database"
                  }
                ], 
                "summary": "Retrieve Metadata Schemata.", 
                "type": "MetadataSchemaResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateSchema", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\t\"title\": \"profile\",\n\t\t\"type\" : \"object\",\n\t\t\"properties\": {\n\t\t\t\"firstName\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"lastName\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"city\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"state\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"email\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"team\": {\n\t\t\t\t\"type\" : \"string\"\n\t\t\t},\n\t\t\t\"position\": {\n\t\t\t\t\"enum\": [ \n\t\t\t\t\t\t\"pitcher\",\n\t\t\t\t\t\t\"catcher\",\n\t\t\t\t\t\t\"first\",\n\t\t\t\t\t\t\"second\",\n\t\t\t\t\t\t\"third\",\n\t\t\t\t\t\t\"shortstop\",\n\t\t\t\t\t\t\"left\",\n\t\t\t\t\t\t\"right\",\n\t\t\t\t\t\t\"center\",\n\t\t\t\t\t\t\"manager\"\n\t\t\t\t\t] \n\t\t\t},\n\t\t\t\"wins\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"losses\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"era\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"so\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"ip\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"games\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"ba\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"hr\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"hits\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"runs\": {\n\t\t\t\t\"type\" : \"integer\"\n\t\t\t},\n\t\t\t\"slg\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"obp\": {\n\t\t\t\t\"type\" : \"number\"\n\t\t\t},\n\t\t\t\"status\": {\n\t\t\t\t\t\"enum\": [ \n\t\t\t\t\t\t\"active\",\n\t\t\t\t\t\t\"retired\",\n\t\t\t\t\t\t\"disabled\",\n\t\t\t\t\t\t\"banned\"\n\t\t\t\t\t] \n\t\t\t}\n\t\t},\n\t\t\"required\" : [ \n\t\t\t\"firstName\", \n\t\t\t\"lastName\", \n\t\t\t\"email\",\n\t\t\t\"position\"\n\t\t]\n}", 
                    "description": "A valid JSON Schema object", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form or JSON schema"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the schema database"
                  }
                ], 
                "summary": "Update or Add a new Metadata Schema.", 
                "type": "MetadataSchemaResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteSchema", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a Schema UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the schema database"
                  }
                ], 
                "summary": "Remove Metadata Schema from the system.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/schemas/{uuid}"
          }, 
          {
            "description": "Query the permissions for the metadata with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listMetadataPermissions", 
                "notes": "Users must have read access to this metadata to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a metadata UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified metadata cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Get the permission ACL for this metadata.", 
                "type": "MultipleMetadataPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateMetadataPermissions", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ\"\n}", 
                    "description": "The metadata permission to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataPermissionRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a valid metadata UUID is not supplied or if the form is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified user cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Add or update a user's permission for the given metadata.", 
                "type": "MetadataPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteMetadataPermission", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a metadata UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Deletes all permissions on the given metadata.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/data/{uuid}/pems"
          }, 
          {
            "description": "Query the permissions for the metadata with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listMetadataPermissionsForUser", 
                "notes": "Users must have read access to this metadata to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a metadata UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified metadata cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Get the permission ACL for this metadata.", 
                "type": "MetadataPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateMetadataPermissionsForUser", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ\"\n}", 
                    "description": "The metadata permission to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataPermissionRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a valid metadata UUID is not supplied or if the form is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified user cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Add or update a user's permission for the given metadata.", 
                "type": "MetadataPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteMetadataPermissionsForUser", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a metadata UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified metadata."
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata database"
                  }
                ], 
                "summary": "Deletes all permissions on the given metadata.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/data/{uuid}/pems/{username}"
          }, 
          {
            "description": "Query the permissions for the metadata schema with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listSchemaPermissions", 
                "notes": "Users must have read access to this schema to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a schema UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified schema cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Get the permission ACL for this schema.", 
                "type": "MultipleMetadataSchemaPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateSchemaPermissions", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ\"\n}", 
                    "description": "The schema permission to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataPermissionRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a valid schema UUID is not supplied or if the form is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified user cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Add or update a user's permission for the given schema.", 
                "type": "MetadataSchemaPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteSchemaPermissions", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a schema UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Deletes all permissions on the given schema.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/schemas/{uuid}/pems"
          }, 
          {
            "description": "Query the permissions for the metadata schema with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listSchemaPermissionsForUser", 
                "notes": "Users must have read access to this schema to view the permissions.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a schema UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified schema cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Get the permission ACL for this schema.", 
                "type": "MetadataSchemaPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateSchemaPermissionsForUser", 
                "notes": "To delete a single user, set their permission to NONE or an empty string", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\":\"\",\n\t\"permission\": \"READ\"\n}", 
                    "description": "The schema permission to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MetadataPermissionRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a valid schema UUID is not supplied or if the form is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified user cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Add or update a user's permission for the given metadata schema.", 
                "type": "MetadataSchemaPermissionResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteSchemaPermissionsForUser", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the metadata schema item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the permission owner", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a schema UUID is not supplied or is invalid."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user or the user is not authorized to access the specified schema."
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the metadata schema database"
                  }
                ], 
                "summary": "Deletes all permissions on the given metadata.", 
                "type": "EmptyMetadataResponse"
              }
            ], 
            "path": "/meta/v2/schemas/{uuid}/pems/{username}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "ACL": {
            "id": "ACL", 
            "name": "", 
            "properties": {
              "read": {
                "description": "can read", 
                "name": "read", 
                "type": "boolean"
              }, 
              "write": {
                "description": "can write", 
                "name": "write", 
                "type": "boolean"
              }
            }
          }, 
          "EmptyMetadata": {
            "id": "EmptyMetadata", 
            "name": "", 
            "properties": {}
          }, 
          "EmptyMetadataResponse": {
            "id": "EmptyMetadataResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "EmptyMetadata"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "Metadata": {
            "id": "Metadata", 
            "name": "", 
            "properties": {
              "associationIds": {
                "description": "UUIDs of associated Agave entities, including the Data to which this Metadata belongs.", 
                "items": {
                  "type": "string"
                }, 
                "name": "associationIds", 
                "type": "array"
              }, 
              "created": {
                "description": "A timestamp indicating when this Metadata was created in the metadata store.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "The name of the Internal User, if any, who owns this metadata.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "lastUpdated": {
                "description": "A timestamp indicating when this Metadata was last updated in the metadata store.", 
                "format": "date-time", 
                "name": "lastUpdated", 
                "type": "string"
              }, 
              "name": {
                "description": "The name of this metadata", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "The API user who owns this Metadata.", 
                "name": "owner", 
                "type": "string"
              }, 
              "uuid": {
                "description": "The UUID for this Metadata.", 
                "name": "uuid", 
                "type": "string"
              }, 
              "value": {
                "description": "A free text or JSON string containing the metadata stored for the given associationIds", 
                "name": "value", 
                "type": "string"
              }
            }
          }, 
          "MetadataPermissionRequest": {
            "id": "MetadataPermissionRequest", 
            "name": "", 
            "properties": {
              "permission": {
                "description": "The permission to set", 
                "enum": [
                  "READ", 
                  "WRITE", 
                  "READ_WRITE", 
                  "ALL", 
                  "NONE"
                ], 
                "name": "permission", 
                "required": true, 
                "type": "string"
              }, 
              "username": {
                "description": "The username of the api user whose permission is to be set.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MetadataPermissionResponse": {
            "id": "MetadataPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "Permissions granted on this metadata resource.", 
                "name": "result", 
                "type": "Permission"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MetadataRequest": {
            "id": "MetadataRequest", 
            "name": "", 
            "properties": {
              "associationIds": {
                "description": "UUIDs of associated Agave entities, including the Data to which this Metadata belongs.", 
                "items": {
                  "type": "string"
                }, 
                "name": "associationIds", 
                "type": "array"
              }, 
              "name": {
                "description": "The name of this metadata", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }, 
              "schemaId": {
                "description": "The UUID of the schema that should be used to validate this request.", 
                "name": "schemaId", 
                "type": "string"
              }, 
              "value": {
                "description": "A free text or JSON string containing the metadata stored for the given associationIds", 
                "name": "value", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MetadataResponse": {
            "id": "MetadataResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Metadata"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MetadataSchema": {
            "id": "MetadataSchema", 
            "name": "", 
            "properties": {
              "created": {
                "description": "A timestamp indicating when this Metadata was created in the metadata schema store.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "The name of the Internal User, if any, who owns this schema.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "lastUpdated": {
                "description": "A timestamp indicating when this Metadata was last updated in the metadata schema store.", 
                "format": "date-time", 
                "name": "lastUpdated", 
                "type": "string"
              }, 
              "owner": {
                "description": "The API user who owns this Schema.", 
                "name": "owner", 
                "type": "string"
              }, 
              "schema": {
                "description": "A JSON Schema", 
                "name": "schema", 
                "type": "string"
              }, 
              "uuid": {
                "description": "The UUID for this Schema.", 
                "name": "uuid", 
                "type": "string"
              }
            }
          }, 
          "MetadataSchemaPermissionResponse": {
            "id": "MetadataSchemaPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "Permissions granted on this schema resource.", 
                "name": "result", 
                "type": "Permission"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MetadataSchemaResponse": {
            "id": "MetadataSchemaResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "MetadataSchema"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleMetadataPermissionResponse": {
            "id": "MultipleMetadataPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "Permissions granted on this metadata resource.", 
                "items": {
                  "$ref": "Permission"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleMetadataResponse": {
            "id": "MultipleMetadataResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "Metadata resources matching the query.", 
                "items": {
                  "$ref": "MetadataResponse"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleMetadataSchemaPermissionResponse": {
            "id": "MultipleMetadataSchemaPermissionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Error message caused by this request", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "Permissions granted on this schema resource.", 
                "items": {
                  "$ref": "Permission"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "Permission": {
            "id": "Permission", 
            "name": "", 
            "properties": {
              "permission": {
                "name": "permission", 
                "type": "ACL"
              }, 
              "username": {
                "description": "Username associate with this permission", 
                "name": "username", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/meta/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create and manage metadata", 
      "name": "meta", 
      "path": "/meta", 
      "url": "http://localhost:9999/meta"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Search and manage monitoring tasks", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The target to search for.", 
                    "name": "target", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter by monitors that are active or inactive.", 
                    "enum": [
                      "true", 
                      "false"
                    ], 
                    "name": "active", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID or supplies an invalid JSON query"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified Monitor cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Retrieve Monitor for a specific resource.", 
                "type": "MultipleMonitorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "add", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{ \n\t\"active\": true, \n\t\"frequency\": 720, \n\t\"internalUsername\": null, \n\t\"target\": \"data.iplantcollaborative.org\", \n\t\"updateSystemStatus\": false \n}", 
                    "description": "The description of the app to add or update. This can be either a file upload or json posted to the request body.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MonitorRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to save the monitor."
                  }
                ], 
                "summary": "Update or Add new Monitor.", 
                "type": "MonitorResponse"
              }
            ], 
            "path": "/monitors/v2/"
          }, 
          {
            "description": "Query for the monitor with the given id", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor", 
                    "name": "monitorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified Monitor cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Retrieve a specific monitor.", 
                "type": "MonitorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "update", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{ \n\t\"active\": true, \n\t\"frequency\": 720, \n\t\"internalUsername\": null, \n\t\"target\": \"data.iplantcollaborative.org\", \n\t\"updateSystemStatus\": false \n}", 
                    "description": "The description of the app to add or update. This can be either a file upload or json posted to the request body.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MonitorRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Updates an existing monitor.", 
                "type": "MonitorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor", 
                    "name": "monitorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies no UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Deletes a monitor.", 
                "type": "EmptyMonitorResponse"
              }
            ], 
            "path": "/monitors/v2/{monitorId}"
          }, 
          {
            "description": "Query for monitor checks", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listChecks", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor", 
                    "name": "monitorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "A timestamp indicating the earliest time of the first monitor check in ISO 8601 format", 
                    "name": "startDate", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "A timestamp indicating the latest time of the first monitor check in ISO 8601 format", 
                    "name": "endDate", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "A timestamp indicating the latest time of the first monitor check in ISO 8601 format", 
                    "enum": [
                      "PASSED", 
                      "FAILED", 
                      "UNKNOWN"
                    ], 
                    "name": "result", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID or supplies an invalid JSON query"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified Monitor cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Retrieve monitor checks for a specific resource.", 
                "type": "MultipleMonitorCheckResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "runCheck", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor", 
                    "name": "monitorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Forces a monitor check to run.", 
                "type": "MonitorCheckResponse"
              }
            ], 
            "path": "/monitors/v2/{monitorId}/checks"
          }, 
          {
            "description": "Query for the monitor check with the given id", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getCheck", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor", 
                    "name": "monitorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the monitor check", 
                    "name": "checkId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified Monitor cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to process the request."
                  }
                ], 
                "summary": "Retrieve a specific monitor check", 
                "type": "MonitorCheckResponse"
              }
            ], 
            "path": "/monitors/v2/{monitorId}/checks/{checkId}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "EmptyMonitor": {
            "id": "EmptyMonitor", 
            "name": "", 
            "properties": {}
          }, 
          "EmptyMonitorResponse": {
            "id": "EmptyMonitorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "EmptyMonitor"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MonitorCheck": {
            "id": "MonitorCheck", 
            "name": "", 
            "properties": {
              "created": {
                "description": "A timestamp indicating when this monitor check was created.", 
                "format": "date-time", 
                "name": "created", 
                "required": true, 
                "type": "string"
              }, 
              "id": {
                "description": "The UUID for this monitor check.", 
                "name": "id", 
                "type": "string"
              }, 
              "message": {
                "description": "The error message if this monitor check failed.", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "The results of this monitor check.", 
                "enum": [
                  "PASSED", 
                  "FAILED", 
                  "UNKNOWN"
                ], 
                "name": "result", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MonitorCheckResponse": {
            "id": "MonitorCheckResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "MonitorCheck"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MonitorDescription": {
            "id": "MonitorDescription", 
            "name": "", 
            "properties": {
              "active": {
                "description": "Whether this monitor is currently active.", 
                "name": "active", 
                "type": "boolean"
              }, 
              "created": {
                "description": "A timestamp indicating when this Monitor was created.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "frequency": {
                "description": "The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.", 
                "format": "int32", 
                "name": "frequency", 
                "type": "integer"
              }, 
              "id": {
                "description": "The UUID for this monitor.", 
                "name": "id", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "Internal user account used to perform the check.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "lastCheck": {
                "description": "The results of the last check run by this monitor.", 
                "name": "lastCheck", 
                "type": "MonitorCheck"
              }, 
              "lastSuccess": {
                "description": "A timestamp indicating the last time this Monitor succeeded in ISO 8601 format", 
                "format": "date-time", 
                "name": "lastSuccess", 
                "type": "string"
              }, 
              "lastUpdated": {
                "description": "A timestamp indicating the last time this Monitor was updated in ISO 8601 format", 
                "format": "date-time", 
                "name": "lastUpdated", 
                "type": "string"
              }, 
              "nextUpdate": {
                "description": "A timestamp indicating the next time this Monitor will be run in ISO 8601 format", 
                "format": "date-time", 
                "name": "nextUpdate", 
                "type": "string"
              }, 
              "owner": {
                "description": "The API user who owns this Monitor.", 
                "name": "owner", 
                "type": "string"
              }, 
              "target": {
                "description": "The id of the sytem to be monitored. This must be an active system registered with the Systems service.", 
                "name": "target", 
                "type": "boolean"
              }, 
              "updateSystemStatus": {
                "description": "Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.", 
                "name": "updateSystemStatus", 
                "type": "boolean"
              }
            }
          }, 
          "MonitorRequest": {
            "id": "MonitorRequest", 
            "name": "", 
            "properties": {
              "active": {
                "defaultValue": true, 
                "description": "Whether this monitor is currently active.", 
                "name": "active", 
                "required": true, 
                "type": "boolean"
              }, 
              "frequency": {
                "defaultValue": 720, 
                "description": "The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.", 
                "format": "int32", 
                "minimum": 5, 
                "name": "frequency", 
                "required": true, 
                "type": "integer"
              }, 
              "internalUsername": {
                "description": "Internal user account used to perform the check.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "target": {
                "defaultValue": "data.iplantcollaborative.org", 
                "description": "The id of the sytem to be monitored. This must be an active system registered with the Systems service.", 
                "name": "target", 
                "required": true, 
                "type": "string"
              }, 
              "updateSystemStatus": {
                "defaultValue": false, 
                "description": "Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.", 
                "name": "updateSystemStatus", 
                "type": "boolean"
              }
            }
          }, 
          "MonitorResponse": {
            "id": "MonitorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "MonitorDescription"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleMonitorCheckResponse": {
            "id": "MultipleMonitorCheckResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Description of an error. null otherwise.", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "MonitorCheck"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleMonitorResponse": {
            "id": "MultipleMonitorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Description of an error. null otherwise.", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "MonitorDescription"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/monitors/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create and manage system monitors", 
      "name": "monitors", 
      "path": "/monitors", 
      "url": "http://localhost:9999/monitors"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Search and manage notification resources", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "add", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"url\" : \"http://requestb.in/1jj4jnz1?uuid={UUID}&status=${EVENT}\",\n\t\"event\" : \"*\",\n\t\"associatedUuid\" : \"<insert uuid here>\",\n\t\"persistent\": true\n}", 
                    "description": "The notification to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "NotificationRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the notification database"
                  }
                ], 
                "summary": "Update or Add new notification.", 
                "type": "NotificationResponse"
              }
            ], 
            "path": "/notifications/v2/"
          }, 
          {
            "description": "Query for the notification with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the associated resource. All notifications for this resource visible to the user will be returned.", 
                    "name": "associatedUuid", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID or supplies an invalid JSON query"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified notification cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the notification database"
                  }
                ], 
                "summary": "Retrieve notification for a specific resource.", 
                "type": "MultipleNotificationResponse"
              }
            ], 
            "path": "/notifications/v2/"
          }, 
          {
            "description": "Query for the notification with the given UUID", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the notification item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user does not supply a UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The specified notification cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the notification database"
                  }
                ], 
                "summary": "Retrieve notification.", 
                "type": "NotificationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "update", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the notification item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"url\" : \"http://requestb.in/1jj4jnz1?uuid={UUID}&status=${EVENT}\",\n\t\"event\" : \"*\",\n\t\"associatedUuid\" : \"<insert uuid here>\",\n\t\"persistent\": true\n}", 
                    "description": "The notification to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "NotificationRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid form"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the notification database"
                  }
                ], 
                "summary": "Update or Add new notification.", 
                "type": "NotificationResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The uuid of the notification item", 
                    "name": "uuid", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies no UUID"
                  }, 
                  {
                    "code": 401, 
                    "message": "Raised if the user is not authorized."
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the notification database"
                  }
                ], 
                "summary": "Remove notification from the system.", 
                "type": "EmptyNotificationResponse"
              }
            ], 
            "path": "/notifications/v2/{uuid}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "EmptyNotification": {
            "id": "EmptyNotification", 
            "name": "", 
            "properties": {}
          }, 
          "EmptyNotificationResponse": {
            "id": "EmptyNotificationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "EmptyNotification"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "MultipleNotificationResponse": {
            "id": "MultipleNotificationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "Description of an error. null otherwise.", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Notification"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "Notification": {
            "id": "Notification", 
            "name": "", 
            "properties": {
              "associatedUuid": {
                "description": "UUID of resource to whome the event applies.", 
                "name": "associatedUuid", 
                "type": "string"
              }, 
              "attempts": {
                "description": "The number of times this notification has been attempted to be fulfilled.", 
                "format": "int32", 
                "name": "attempts", 
                "type": "integer"
              }, 
              "created": {
                "description": "A timestamp indicating when this notification was created in the notification store.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "lastSent": {
                "description": "A timestamp indicating the last time this notification was sent.", 
                "format": "date-time", 
                "name": "lastSent", 
                "type": "string"
              }, 
              "owner": {
                "description": "The API user who owns this notification.", 
                "name": "owner", 
                "type": "string"
              }, 
              "persistent": {
                "description": "Whether this notification should stay active after it fires the first time.", 
                "name": "persistent", 
                "type": "boolean"
              }, 
              "responseCode": {
                "description": "The response code from POSTing to the url or sending an email.", 
                "format": "int32", 
                "name": "responseCode", 
                "type": "integer"
              }, 
              "success": {
                "description": "Whether this notification was sent successfully.", 
                "name": "success", 
                "type": "boolean"
              }, 
              "url": {
                "description": "The url or email address that will be notified of the event.", 
                "name": "url", 
                "type": "string"
              }, 
              "uuid": {
                "description": "The UUID for this notification.", 
                "name": "uuid", 
                "type": "string"
              }
            }
          }, 
          "NotificationRequest": {
            "id": "NotificationRequest", 
            "name": "", 
            "properties": {
              "associatedUuid": {
                "description": "UUID of resource to whome the event applies.", 
                "name": "associatedUuid", 
                "required": true, 
                "type": "string"
              }, 
              "persistent": {
                "description": "Whether this notification should stay active after it fires the first time.", 
                "name": "persistent", 
                "required": true, 
                "type": "boolean"
              }, 
              "url": {
                "description": "The url or email address that will be notified of the event.", 
                "name": "url", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "NotificationResponse": {
            "id": "NotificationResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Notification"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "API version number", 
                "name": "version", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/notifications/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Subscribe to and manage notifications", 
      "name": "notifications", 
      "path": "/notifications", 
      "url": "http://localhost:9999/notifications"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Create a new PostIt.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "Retrieve a list of your active PostIts.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [], 
                "summary": "List existing PostIts", 
                "type": "MultiplePostItResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "create", 
                "notes": "A PostIt is a pre-authenticated URI that can be given to colleagues, third party services, or reused internally in leu of making a formal authenticated request to the destination URI. PostIts can be used one or more times, limited to a specific lifetime, or both.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"url\": \"https://api.tacc.cloud/files/v2/media/system/demo.storage.example.com/wc-1.00/picksumipsum.txt\",\n\t\"method\": \"GET\",\n\t\"maxUses\": 25,\n\t\"lifetime\": 3600,\n\t\"noauth\": false\n}", 
                    "description": "The PostIt to create.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "PostItRequest"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid username format"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The user profile cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the profile database"
                  }
                ], 
                "summary": "Create a new PostIt", 
                "type": "PostIt"
              }
            ], 
            "path": "/postits/v2/"
          }, 
          {
            "description": "Operations on a specific PostIt.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The nonce of this PostIt URL", 
                    "name": "nonce", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Immediately invalidates this PostIt URL.", 
                "type": "SinglePostItResponse"
              }
            ], 
            "path": "/postits/v2/{nonce}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "MultiplePostItResponse": {
            "id": "MultiplePostItResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "list of postits", 
                "items": {
                  "$ref": "PostIt"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "PostIt": {
            "id": "PostIt", 
            "name": "", 
            "properties": {
              "created": {
                "description": "The creation date in ISO 8601 format.", 
                "format": "date-time", 
                "name": "created", 
                "type": "string"
              }, 
              "creator": {
                "description": "The api user who made the PostIt creation request.", 
                "name": "creator", 
                "type": "string"
              }, 
              "expires": {
                "description": "The expiration date in ISO 8601 format.", 
                "format": "date-time", 
                "name": "expires", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "The username of the internal user attached to this PostIt.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "method": {
                "description": "The url that will be invoked when the PostIt is redeemed.", 
                "name": "method", 
                "type": "string"
              }, 
              "postit": {
                "description": "The PostIt nonce.", 
                "name": "postit", 
                "type": "string"
              }, 
              "remainingUses": {
                "description": "The number of invocations remaining on this token. ", 
                "format": "int32", 
                "name": "remainingUses", 
                "type": "integer"
              }, 
              "url": {
                "description": "The url that will be invoked when the PostIt is redeemed.", 
                "name": "url", 
                "type": "string"
              }
            }
          }, 
          "PostItRequest": {
            "id": "PostItRequest", 
            "name": "", 
            "properties": {
              "internalUsername": {
                "description": "The username of the internal user attached to this PostIt.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "lifetime": {
                "description": "The maximum lifetime in seconds of this PostIt on this token. Defaults to 2592000 (30 days)", 
                "format": "int32", 
                "minimum": 1, 
                "name": "lifetime", 
                "type": "integer"
              }, 
              "maxUses": {
                "description": "The maximum number of invocations remaining on this PostIt. Defaults to no limit", 
                "format": "int32", 
                "name": "maxUses", 
                "type": "integer"
              }, 
              "method": {
                "description": "The method that will be invoked when the PostIt is redeemed.", 
                "enum": [
                  "GET", 
                  "PUT", 
                  "POST", 
                  "DELETE"
                ], 
                "name": "method", 
                "type": "string"
              }, 
              "noauth": {
                "description": "If true, the provided url will be called without authentication. Default is false", 
                "name": "noauth", 
                "type": "boolean"
              }, 
              "url": {
                "description": "The url that will be invoked when the PostIt is redeemed.", 
                "name": "url", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "SinglePostItResponse": {
            "id": "SinglePostItResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "PostIt"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/postits/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create pre-authenticated, disposable URLs", 
      "name": "postits", 
      "path": "/postits", 
      "url": "http://localhost:9999/postits"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Retrieve a (paginated) list of profiles.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by name.", 
                    "name": "name", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by email.", 
                    "name": "email", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by first_name.", 
                    "name": "first_name", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by last_name.", 
                    "name": "last_name", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by full_name.", 
                    "name": "full_name", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by status.", 
                    "name": "status", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Filter results by username.", 
                    "name": "username", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid username format"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The user profile cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the profile database"
                  }
                ], 
                "summary": "List user profiles", 
                "type": "MultipleProfileResponse"
              }
            ], 
            "path": "/profiles/v2"
          }, 
          {
            "description": "Retrieve the profile of the requesting user.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid username format"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The user profile cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the profile database"
                  }
                ], 
                "summary": "Find authenticated user profile", 
                "type": "SingleProfileResponse"
              }
            ], 
            "path": "/profiles/v2/me"
          }, 
          {
            "description": "Retrieve the profile of an API user by their exact username.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listByUsername", 
                "notes": "Internal users will not be returned", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The username of a valid api user", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 400, 
                    "message": "Raised if a user supplies an invalid username format"
                  }, 
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 404, 
                    "message": "The user profile cannot be found"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the profile database"
                  }
                ], 
                "summary": "Find api user profile by their api username", 
                "type": "SingleProfileResponse"
              }
            ], 
            "path": "/profiles/v2/{username}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "InternalUser": {
            "id": "InternalUser", 
            "name": "", 
            "properties": {
              "city": {
                "description": "The api user's city.", 
                "name": "city", 
                "type": "string"
              }, 
              "country": {
                "description": "The api user's country.", 
                "name": "country", 
                "type": "string"
              }, 
              "department": {
                "description": "The api user's institutional department.", 
                "name": "department", 
                "type": "string"
              }, 
              "email": {
                "description": "The api user's unique email address.", 
                "name": "email", 
                "type": "string"
              }, 
              "fax": {
                "description": "The api user's fax number.", 
                "name": "fax", 
                "type": "string"
              }, 
              "firstName": {
                "description": "The api user's first name.", 
                "name": "firstName", 
                "type": "string"
              }, 
              "gender": {
                "description": "The api user's gender. male or female.", 
                "name": "gender", 
                "type": "string"
              }, 
              "institution": {
                "description": "The api user's home institution", 
                "name": "institution", 
                "type": "string"
              }, 
              "lastName": {
                "description": "The api user's last name.", 
                "name": "lastName", 
                "type": "string"
              }, 
              "phone": {
                "description": "The api user's phone number.", 
                "name": "phone", 
                "type": "string"
              }, 
              "position": {
                "description": "The api user's position of employment.", 
                "name": "position", 
                "type": "string"
              }, 
              "researchArea": {
                "description": "The api user's primary area of research.", 
                "name": "researchArea", 
                "type": "string"
              }, 
              "state": {
                "description": "The api user's state.", 
                "name": "state", 
                "type": "string"
              }, 
              "status": {
                "description": "The api user's status. active or deleted.", 
                "name": "status", 
                "type": "string"
              }, 
              "username": {
                "description": "The api user's unique username.", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "InternalUserRequest": {
            "id": "InternalUserRequest", 
            "name": "", 
            "properties": {
              "city": {
                "description": "The api user's city.", 
                "name": "city", 
                "type": "string"
              }, 
              "country": {
                "description": "The api user's country.", 
                "name": "country", 
                "type": "string"
              }, 
              "department": {
                "description": "The api user's institutional department.", 
                "name": "department", 
                "type": "string"
              }, 
              "email": {
                "description": "The api user's unique email address.", 
                "name": "email", 
                "required": true, 
                "type": "string"
              }, 
              "fax": {
                "description": "The api user's fax number.", 
                "name": "fax", 
                "type": "string"
              }, 
              "firstName": {
                "description": "The api user's first name.", 
                "name": "firstName", 
                "type": "string"
              }, 
              "gender": {
                "description": "The api user's gender. male or female.", 
                "enum": [
                  "male", 
                  "female"
                ], 
                "name": "gender", 
                "type": "string"
              }, 
              "institution": {
                "description": "The api user's home institution", 
                "name": "institution", 
                "type": "string"
              }, 
              "lastName": {
                "description": "The api user's last name.", 
                "name": "lastName", 
                "type": "string"
              }, 
              "phone": {
                "description": "The api user's phone number.", 
                "name": "phone", 
                "type": "string"
              }, 
              "position": {
                "description": "The api user's position of employment.", 
                "name": "position", 
                "type": "string"
              }, 
              "researchArea": {
                "description": "The api user's primary area of research.", 
                "name": "researchArea", 
                "type": "string"
              }, 
              "state": {
                "description": "The api user's state.", 
                "name": "state", 
                "type": "string"
              }, 
              "status": {
                "description": "The api user's status. active or deleted.", 
                "name": "status", 
                "type": "string"
              }, 
              "username": {
                "description": "The api user's unique username.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MultipleInternalUserResponse": {
            "id": "MultipleInternalUserResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "InternalUser"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleProfileResponse": {
            "id": "MultipleProfileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Profile"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Profile": {
            "id": "Profile", 
            "name": "", 
            "properties": {
              "city": {
                "description": "The api user's city.", 
                "name": "city", 
                "type": "string"
              }, 
              "country": {
                "description": "The api user's country.", 
                "name": "country", 
                "type": "string"
              }, 
              "department": {
                "description": "The api user's institutional department.", 
                "name": "department", 
                "type": "string"
              }, 
              "email": {
                "description": "The api user's unique email address.", 
                "name": "email", 
                "type": "string"
              }, 
              "fax": {
                "description": "The api user's fax number.", 
                "name": "fax", 
                "type": "string"
              }, 
              "firstName": {
                "description": "The api user's first name.", 
                "name": "firstName", 
                "type": "string"
              }, 
              "gender": {
                "description": "The api user's gender. male or female.", 
                "name": "gender", 
                "type": "string"
              }, 
              "institution": {
                "description": "The api user's home institution", 
                "name": "institution", 
                "type": "string"
              }, 
              "lastName": {
                "description": "The api user's last name.", 
                "name": "lastName", 
                "type": "string"
              }, 
              "phone": {
                "description": "The api user's phone number.", 
                "name": "phone", 
                "type": "string"
              }, 
              "position": {
                "description": "The api user's position of employment.", 
                "name": "position", 
                "type": "string"
              }, 
              "researchArea": {
                "description": "The api user's primary area of research.", 
                "name": "researchArea", 
                "type": "string"
              }, 
              "state": {
                "description": "The api user's state.", 
                "name": "state", 
                "type": "string"
              }, 
              "username": {
                "description": "The api user's unique username.", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "SingleInternalUserResponse": {
            "id": "SingleInternalUserResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "InternalUser"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleProfileResponse": {
            "id": "SingleProfileResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Profile"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/profiles/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create and manage application users", 
      "name": "profiles", 
      "path": "/profiles", 
      "url": "http://localhost:9999/profiles"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Query for the list of available public systems", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "All systems you own, public systems, and systems that have been shared with you.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The type of system to return", 
                    "enum": [
                      "STORAGE", 
                      "EXECUTION"
                    ], 
                    "name": "type", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Should only default systems be returned", 
                    "name": "default", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Should only publicly available systems be returned", 
                    "name": "public", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "boolean"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Show all systems available to the user.", 
                "type": "MultipleSystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "add", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"id\": \"demo.execute.example.com\",\n\t\"name\": \"Demo SGE + GSISSH demo vm\",\n\t\"status\": \"UP\",\n\t\"type\": \"EXECUTION\",\n\t\"description\": \"My example system using gsissh and gridftp to submit jobs used for testing.\",\n\t\"site\": \"example.com\",\n\t\"executionType\": \"HPC\",\n\t\"queues\": [\n\t\t{\n\t\t\t\"name\": \"debug\",\n\t\t\t\"maxJobs\": 100,\n\t\t\t\"maxUserJobs\": 10,\n\t\t\t\"maxNodes\": 128,\n\t\t\t\"maxMemoryPerNode\": \"2GB\",\n\t\t\t\"maxProcessorsPerNode\": 128,\n\t\t\t\"maxRequestedTime\": \"24:00:00\",\n\t\t\t\"customDirectives\": \"\",\n\t\t\t\"default\": true\n\t\t}\n\t],\n\t\"login\": {\n\t\t\"host\": \"gsissh.example.com\",\n\t\t\"port\": 2222,\n\t\t\"protocol\": \"GSISSH\",\n\t\t\"scratchDir\": \"/scratch\",\n\t\t\"workDir\": \"/work\",\n\t\t\"auth\": {\n\t\t\t\"username\": \"demo\",\n\t\t\t\"password\": \"demo\",\n\t\t\t\"credential\": \"\",\n\t\t\t\"type\": \"X509\",\n\t\t\t\"server\": {\n\t\t\t\t\"id\": \"myproxy.teragrid.org\",\n\t\t\t\t\"name\": \"XSEDE MyProxy Server\",\n\t\t\t\t\"site\": \"ncsa.uiuc.edu\",\n\t\t\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\t\t\"port\": 7512,\n\t\t\t\t\"protocol\": \"MYPROXY\"\n\t\t\t}\n\t\t}\n\t},\n\t\"storage\": {\n\t\t\"host\": \"gridftp.example.com\",\n\t\t\"port\": 2811,\n\t\t\"protocol\": \"GRIDFTP\",\n\t\t\"rootDir\": \"/home/demo\",\n\t\t\"homeDir\": \"/\",\n\t\t\"auth\": {\n\t\t\t\"username\": \"demo\",\n\t\t\t\"password\": \"demo\",\n\t\t\t\"credential\": \"\",\n\t\t\t\"type\": \"X509\",\n\t\t\t\"server\": {\n\t\t\t\t\"id\": \"myproxy.teragrid.org\",\n\t\t\t\t\"name\": \"XSEDE MyProxy Server\",\n\t\t\t\t\"site\": \"ncsa.uiuc.edu\",\n\t\t\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\t\t\"port\": 7512,\n\t\t\t\t\"protocol\": \"MYPROXY\"\n\t\t\t}\n\t\t}\n\t},\n\t\"maxSystemJobs\": 100,\n\t\"maxSystemJobsPerUser\": 10,\n\t\"scheduler\": \"SGE\",\n\t\"environment\": \"\",\n\t\"startupScript\": \"./bashrc\"\n}", 
                    "description": "The description of the system to add or update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "SystemRequest"
                  }
                ], 
                "summary": "Add or update a system.", 
                "type": "SingleSystemResponse"
              }
            ], 
            "path": "/systems/v2/"
          }, 
          {
            "description": "Find information about an individual system.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Find information about an individual system.", 
                "type": "SingleSystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "update", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"id\": \"demo.execute.example.com\",\n\t\"name\": \"Demo SGE + GSISSH demo vm\",\n\t\"status\": \"UP\",\n\t\"type\": \"EXECUTION\",\n\t\"description\": \"My example system using gsissh and gridftp to submit jobs used for testing.\",\n\t\"site\": \"example.com\",\n\t\"executionType\": \"HPC\",\n\t\"queues\": [\n\t\t{\n\t\t\t\"name\": \"debug\",\n\t\t\t\"maxJobs\": 100,\n\t\t\t\"maxUserJobs\": 10,\n\t\t\t\"maxNodes\": 128,\n\t\t\t\"maxMemoryPerNode\": \"2GB\",\n\t\t\t\"maxProcessorsPerNode\": 128,\n\t\t\t\"maxRequestedTime\": \"24:00:00\",\n\t\t\t\"customDirectives\": \"\",\n\t\t\t\"default\": true\n\t\t}\n\t],\n\t\"login\": {\n\t\t\"host\": \"gsissh.example.com\",\n\t\t\"port\": 2222,\n\t\t\"protocol\": \"GSISSH\",\n\t\t\"scratchDir\": \"/scratch\",\n\t\t\"workDir\": \"/work\",\n\t\t\"auth\": {\n\t\t\t\"username\": \"demo\",\n\t\t\t\"password\": \"demo\",\n\t\t\t\"credential\": \"\",\n\t\t\t\"type\": \"X509\",\n\t\t\t\"server\": {\n\t\t\t\t\"id\": \"myproxy.teragrid.org\",\n\t\t\t\t\"name\": \"XSEDE MyProxy Server\",\n\t\t\t\t\"site\": \"ncsa.uiuc.edu\",\n\t\t\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\t\t\"port\": 7512,\n\t\t\t\t\"protocol\": \"MYPROXY\"\n\t\t\t}\n\t\t}\n\t},\n\t\"storage\": {\n\t\t\"host\": \"gridftp.example.com\",\n\t\t\"port\": 2811,\n\t\t\"protocol\": \"GRIDFTP\",\n\t\t\"rootDir\": \"/home/demo\",\n\t\t\"homeDir\": \"/\",\n\t\t\"auth\": {\n\t\t\t\"username\": \"demo\",\n\t\t\t\"password\": \"demo\",\n\t\t\t\"credential\": \"\",\n\t\t\t\"type\": \"X509\",\n\t\t\t\"server\": {\n\t\t\t\t\"id\": \"myproxy.teragrid.org\",\n\t\t\t\t\"name\": \"XSEDE MyProxy Server\",\n\t\t\t\t\"site\": \"ncsa.uiuc.edu\",\n\t\t\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\t\t\"port\": 7512,\n\t\t\t\t\"protocol\": \"MYPROXY\"\n\t\t\t}\n\t\t}\n\t},\n\t\"maxSystemJobs\": 100,\n\t\"maxSystemJobsPerUser\": 10,\n\t\"scheduler\": \"SGE\",\n\t\"environment\": \"\",\n\t\"startupScript\": \"./bashrc\"\n}", 
                    "description": "The description of the system to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "SystemRequest"
                  }
                ], 
                "summary": "Find information about an individual system.", 
                "type": "SingleSystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "manage", 
                "notes": "PUBLISH moves the system from private to public. Only API administrators can peform this action. DEFAULT makes the given system your default system of that type. When no system is explicitly specified in URI, your default storage system will be used. CLONE creates a private copy of the named system. Authentication information will not be cloned, so you must update the system with your own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"action\": \"clone\",\n\t\"name\": \"storage-copy.example.com\",\n}", 
                    "description": "The description of the system to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "SystemOperationRequest"
                  }
                ], 
                "summary": "Perform a management action on the system.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "Disables the system and all applications registered to it. Once deleted, the system cannot be recovered and the systemId cannot be reused.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The unique id of the system", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Delete a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}"
          }, 
          {
            "description": "List all user roles on this system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listRoles", 
                "notes": "Users must have ADMIN role or greater on a system to view its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of all users and their roles on this system.", 
                "type": "MultipleSystemRoleResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateRole", 
                "notes": "Setting a user's role to NONE or an empty string is the same as deleting that user's permission. Once all user's roles have been removed from a system, any applications that were registered by the user on the system will be disabled. Users must have ADMIN role or greater on a system to manage its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\": \"rclemens\",\n\t\"role\": \"USER\",\n}", 
                    "description": "The role to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "SystemRole"
                  }
                ], 
                "summary": "Add or update a user's role on a system.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteRoles", 
                "notes": "This will reset the permissions such that only the user who registered the system will be able to view it. System owners cannot remove their own permissions. All apps registered by the deleted users on this system will be disabled. Users must have ADMIN role or greater on a system to delete its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all roles on a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}/roles"
          }, 
          {
            "description": "List all user roles on this system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getRoleForUser", 
                "notes": "Users must have ADMIN role or greater on a system to view its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the user about whose role you are inquiring.", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a specific user's roles on this system.", 
                "type": "SingleSystemRoleResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateRoleForUser", 
                "notes": "Setting a user's role to NONE or an empty string is the same as deleting that user's permission. Once all user's roles have been removed from a system, any applications that were registered by the user on the system will be disabled. Users must have ADMIN role or greater on a system to edit its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the role", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"username\": \"rclemens\",\n\t\"role\": \"USER\",\n}", 
                    "description": "The role to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "SystemRole"
                  }
                ], 
                "summary": "Add or update a user's role on a system.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteRoleForUser", 
                "notes": "This will reset the permissions such that only the user who registered the system will be able to view it. System owners cannot remove their own permissions. All apps registered by the deleted users on this system will be disabled. Users must have ADMIN role or greater on a system to delete its roles.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of the api user associated with the role", 
                    "name": "username", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all roles on a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}/roles/{username}"
          }, 
          {
            "description": "List of internal user credentials on this system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listCredentials", 
                "notes": "Users must have ADMIN role or greater on a system to view its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of all internal users and their credentials on this system.", 
                "type": "SystemCredentialsResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateCredentials", 
                "notes": "Credentials will be valided when submitted. If the credentials are not valid, an error will be returned. Users must have ADMIN role or greater on a system to manage its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"internalUsername\": null,\n\t\"username\": \"nryan\",\n\t\"password\": \"<password>\",\n\t\"credential\": null,\n\t\"type\": \"X509\",\n\t\"server\": {\n\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\"port\": 7512,\n\t\t\"protocol\": \"MYPROXY\"\n\t},\n\t\"default\": true\n}", 
                    "description": "The description of the internal user credential to add or update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "UserCredential"
                  }
                ], 
                "summary": "Add or update a user's credential on a system. This applies both to data and, if applicable, login credenitals.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteCredentials", 
                "notes": "This will delete all credentials except the default system credential. The internal users will remain unchanged and their individual credentials will fall back to the default system credential on all future interactions. Users must have ADMIN role or greater on a system to delete its roles. No sensitive information will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all credentials registered to a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}/credentials"
          }, 
          {
            "description": "List of internal user credentials on this system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listCredentialsForInternalUser", 
                "notes": "Users must have ADMIN role or greater on a system to view its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get a list of all internal users and their credentials on this system.", 
                "type": "SystemCredentialsResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateCredentialsForInternalUser", 
                "notes": "Credentials will be valided when submitted. If the credentials are not valid, an error will be returned. The internalUsername value in the POST JSON must match the URI username value or an error message will be returned. Users must have ADMIN role or greater on a system to manage its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"internalUsername\": null,\n\t\"username\": \"nryan\",\n\t\"password\": \"<password>\",\n\t\"credential\": null,\n\t\"type\": \"X509\",\n\t\"server\": {\n\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\"port\": 7512,\n\t\t\"protocol\": \"MYPROXY\"\n\t},\n\t\"default\": true\n}", 
                    "description": "The description of the internal user credential to add or update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "UserCredential"
                  }
                ], 
                "summary": "Add or update a user's credentials on a system.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteCredentialsForInternalUser", 
                "notes": "This will delete all internal user credentials on this system. The internal users will remain unchanged and their individual credentials will fall back to the default system credential on all future interactions. Users must have ADMIN role or greater on a system to delete its roles. No sensitive information will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes all credentials registered to a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}/credentials/{internalUsername}"
          }, 
          {
            "description": "List of internal user credentials on this system", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listCredentialsForInternalUserByType", 
                "notes": "If the internal user has no personal credential registered, the system default credential of the specified type will be returned. Users must have ADMIN role or greater on a system to view its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The configuration type to which to apply this credential.", 
                    "enum": [
                      "STORAGE", 
                      "LOGIN"
                    ], 
                    "name": "credentialType", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "summary": "Get the internal user credential of the given type on the system.", 
                "type": "SystemCredentialsResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "updateCredentialsForInternalUserByType", 
                "notes": "Credentials will be valided when submitted. If the credentials are not valid, an error will be returned. The internalUsername value in the POST JSON must match the URI username value or an error message will be returned. Users must have ADMIN role or greater on a system to manage its credentials. No sensitive information will be returned. This is strictly to keep track of which internal users have their own credentials.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The configuration type to which to apply this credential.", 
                    "enum": [
                      "STORAGE", 
                      "LOGIN"
                    ], 
                    "name": "credentialType", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"internalUsername\": null,\n\t\"username\": \"nryan\",\n\t\"password\": \"<password>\",\n\t\"credential\": null,\n\t\"type\": \"X509\",\n\t\"server\": {\n\t\t\"endpoint\": \"myproxy.teragrid.org\",\n\t\t\"port\": 7512,\n\t\t\"protocol\": \"MYPROXY\"\n\t},\n\t\"default\": true\n}", 
                    "description": "The description of the internal user credential to add or update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "UserCredential"
                  }
                ], 
                "summary": "Add or update a credential of the given type on a system.", 
                "type": "EmptySystemResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteCredentialsForInternalUserByType", 
                "notes": "This will delete all internal user credentials for the specified type on this system. The internal users will remain unchanged and their individual credentials will fall back to the default system credential on all future interactions. Users must have ADMIN role or greater on a system to delete its roles. No sensitive information will be returned.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the system.", 
                    "name": "systemId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The username of a internal user on this system.", 
                    "name": "internalUsername", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The configuration type to which to apply this credential.", 
                    "enum": [
                      "STORAGE", 
                      "LOGIN"
                    ], 
                    "name": "credentialType", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Deletes the internal user credentials for the given credential type on a system.", 
                "type": "EmptySystemResponse"
              }
            ], 
            "path": "/systems/v2/{systemId}/credentials/{internalUsername}/{credentialType}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "BatchQueue": {
            "id": "BatchQueue", 
            "name": "", 
            "properties": {
              "customDirectives": {
                "description": "Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345", 
                "name": "customDirectives", 
                "type": "string"
              }, 
              "default": {
                "description": "Is this the default queue for the system.", 
                "name": "default", 
                "required": true, 
                "type": "boolean"
              }, 
              "maxJobs": {
                "description": "The maximum number of jobs that can be in queue at once.", 
                "format": "int32", 
                "name": "maxJobs", 
                "type": "integer"
              }, 
              "maxMemoryPerNode": {
                "description": "The max memory available per node to jobs submitted to this queue.", 
                "name": "maxMemoryPerNode", 
                "type": "string"
              }, 
              "maxNodes": {
                "description": "The max nodes available per node to jobs submitted to this queue.", 
                "name": "maxNodes", 
                "type": "string"
              }, 
              "maxProcessorsPerNode": {
                "description": "The max processors per node available to jobs submitted to this queue.", 
                "format": "int32", 
                "name": "maxProcessorsPerNode", 
                "type": "integer"
              }, 
              "maxRequestedTime": {
                "description": "The max length of jobs submitted to this queue in hhh:mm:ss format.", 
                "name": "maxRequestedTime", 
                "type": "string"
              }, 
              "maxUserJobs": {
                "description": "The maximum number of jobs per user that can be in queue at once.", 
                "format": "int32", 
                "name": "maxUserJobs", 
                "type": "integer"
              }, 
              "name": {
                "description": "The name of the batch queue.", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "EmptySystemResponse": {
            "id": "EmptySystemResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "empty result", 
                "name": "result", 
                "type": "string"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ExecutionSystem": {
            "id": "ExecutionSystem", 
            "name": "", 
            "properties": {
              "executionType": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "enum": [
                  "HPC", 
                  "CONDOR", 
                  "CLI"
                ], 
                "name": "executionType", 
                "required": true, 
                "type": "string"
              }, 
              "login": {
                "description": "The login config defining how to connect to this system for job submission.", 
                "name": "login", 
                "required": true, 
                "type": "LoginConfig"
              }, 
              "maxSystemJobs": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues.", 
                "format": "int32", 
                "name": "maxSystemJobs", 
                "type": "int"
              }, 
              "maxSystemJobsPerUser": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.", 
                "format": "int32", 
                "name": "maxSystemJobsPerUser", 
                "type": "int"
              }, 
              "queues": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "items": {
                  "$ref": "BatchQueue"
                }, 
                "name": "queues", 
                "required": true, 
                "type": "array"
              }, 
              "scheduler": {
                "description": "The type of scheduled used to run jobs.", 
                "enum": [
                  "COBALT", 
                  "CONDOR", 
                  "FORK", 
                  "LOADLEVELER", 
                  "LSF", 
                  "MOAB", 
                  "PBS", 
                  "SGE", 
                  "SLURM", 
                  "TORQUE", 
                  "UNKNOWN"
                ], 
                "name": "scheduler", 
                "required": true, 
                "type": "string"
              }, 
              "scratchDir": {
                "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.", 
                "name": "scratchDir", 
                "type": "string"
              }, 
              "workDir": {
                "description": "The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.", 
                "name": "workDir", 
                "type": "string"
              }
            }, 
            "required": [
              "executionType", 
              "login", 
              "queues", 
              "scheduler"
            ]
          }, 
          "LoginConfig": {
            "id": "LoginConfig", 
            "name": "", 
            "properties": {
              "auth": {
                "description": "The default authentication credential used for this system.", 
                "name": "auth", 
                "required": true, 
                "type": "UserCredential"
              }, 
              "host": {
                "description": "The hostname or ip address of the submission server", 
                "name": "host", 
                "required": true, 
                "type": "string"
              }, 
              "port": {
                "description": "The port number of the submission server.", 
                "format": "int32", 
                "name": "port", 
                "required": true, 
                "type": "integer"
              }, 
              "protocol": {
                "description": "The protocol used to authenticate to the submission server.", 
                "enum": [
                  "GSISSH", 
                  "SSH", 
                  "LOCAL"
                ], 
                "name": "protocol", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "MultipleSystemResponse": {
            "id": "MultipleSystemResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "SystemSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleSystemRoleResponse": {
            "id": "MultipleSystemRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "All matching roles for this system", 
                "items": {
                  "$ref": "SystemRole"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleSystemResponse": {
            "id": "SingleSystemResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "System"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleSystemRoleResponse": {
            "id": "SingleSystemRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "The user's role for this system", 
                "name": "result", 
                "type": "SystemRole"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "StorageConfig": {
            "id": "StorageConfig", 
            "name": "", 
            "properties": {
              "auth": {
                "description": "The default authentication credential used for this system.", 
                "name": "auth", 
                "required": true, 
                "type": "UserCredential"
              }, 
              "homeDir": {
                "description": "The path on the remote system to use as the home directory for all API requests. For cases where the home directory should be dynamically defined, the ${USERNAME} token can be included in the homeDir value to represent the username of the authenticated user. ex. /home/${USERNAME}.", 
                "name": "homeDir", 
                "type": "string"
              }, 
              "host": {
                "description": "The hostname or ip address of the storage server", 
                "name": "host", 
                "required": true, 
                "type": "string"
              }, 
              "mirror": {
                "description": "Whether the permissions set on the server should be pushed to the storage system itself. This only applies to IRODS and AWS systems.", 
                "name": "mirror", 
                "type": "boolean"
              }, 
              "port": {
                "description": "The port number of the storage server.", 
                "format": "int32", 
                "name": "port", 
                "required": true, 
                "type": "integer"
              }, 
              "protocol": {
                "description": "The protocol used to authenticate to the storage server.", 
                "enum": [
                  "GRIDFTP", 
                  "FTP", 
                  "SFTP", 
                  "IRODS", 
                  "LOCAL"
                ], 
                "name": "protocol", 
                "required": true, 
                "type": "string"
              }, 
              "publicAppsDir": {
                "description": "The path on the remote system where apps will be stored if this is set as the default public storage system.", 
                "name": "publicAppsDir", 
                "type": "string"
              }, 
              "resource": {
                "description": "The name of the target resource when defining an IRODS system.", 
                "name": "resource", 
                "type": "string"
              }, 
              "rootDir": {
                "description": "The path on the remote system to use as the root for all API requests.", 
                "name": "rootDir", 
                "type": "string"
              }, 
              "zone": {
                "description": "The name of the zone when defining an IRODS system.", 
                "name": "zone", 
                "type": "string"
              }
            }
          }, 
          "StorageSystem": {
            "id": "StorageSystem", 
            "name": "", 
            "properties": {}
          }, 
          "StoredCredential": {
            "id": "StoredCredential", 
            "name": "", 
            "properties": {
              "credential": {
                "description": "The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..", 
                "name": "credential", 
                "type": "string"
              }, 
              "default": {
                "description": "Is this the default credential for this internal user of this type on this system?", 
                "name": "default", 
                "type": "boolean"
              }, 
              "expirationDate": {
                "description": "The date the credential expires in ISO 8601 format.", 
                "format": "date-time", 
                "name": "expirationDate", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "The username of the internal user associated with this credential.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "parentType": {
                "description": "The system type this credential is associated with.", 
                "enum": [
                  "STORAGE", 
                  "EXECUTION"
                ], 
                "name": "parentType", 
                "type": "string"
              }, 
              "password": {
                "description": "The password on the remote system used to authenticate.", 
                "name": "password", 
                "type": "string"
              }, 
              "privateKey": {
                "description": "The public ssh key used to authenticate to the remote system..", 
                "name": "privateKey", 
                "type": "string"
              }, 
              "publicKey": {
                "description": "The public ssh key used to authenticate to the remote system.", 
                "name": "publicKey", 
                "type": "string"
              }, 
              "server": {
                "description": "The server from which a credential may be obtained.", 
                "name": "server", 
                "type": "UserCredentialServer"
              }, 
              "type": {
                "description": "The authentication type.", 
                "enum": [
                  "LOCAL", 
                  "PAM", 
                  "PASSWORD", 
                  "SSHKEYS", 
                  "TOKEN", 
                  "X509"
                ], 
                "name": "type", 
                "required": true, 
                "type": "string"
              }, 
              "username": {
                "description": "The local username on the remote system used to authenticate.", 
                "name": "username", 
                "required": true, 
                "type": "string"
              }, 
              "valid": {
                "description": "Is the credential still valid or has it expired?.", 
                "name": "valid", 
                "type": "boolean"
              }
            }
          }, 
          "System": {
            "discriminator": "type", 
            "id": "System", 
            "name": "", 
            "properties": {
              "default": {
                "description": "Is the system the default for the authenticated user?", 
                "name": "default", 
                "type": "boolean"
              }, 
              "description": {
                "description": "Verbose description of this system.", 
                "name": "description", 
                "type": "string"
              }, 
              "environment": {
                "description": "Environment variables to set upon login prior to job submission.", 
                "name": "environment", 
                "type": "string"
              }, 
              "executionType": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "enum": [
                  "HPC", 
                  "CONDOR", 
                  "CLI"
                ], 
                "name": "executionType", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique identifier for this system.", 
                "name": "id", 
                "type": "string"
              }, 
              "lastModified": {
                "description": "The date this system was last modified in ISO 8601 format.", 
                "format": "date-time", 
                "name": "lastModified", 
                "type": "string"
              }, 
              "login": {
                "description": "The login config defining how to connect to this system for job submission.", 
                "name": "login", 
                "type": "LoginConfig"
              }, 
              "maxSystemJobs": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues.", 
                "format": "int32", 
                "name": "maxSystemJobs", 
                "type": "int"
              }, 
              "maxSystemJobsPerUser": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.", 
                "format": "int32", 
                "name": "maxSystemJobsPerUser", 
                "type": "int"
              }, 
              "name": {
                "description": "Common name for this system.", 
                "name": "name", 
                "type": "string"
              }, 
              "public": {
                "description": "Is the system publicly available?", 
                "name": "public", 
                "type": "boolean"
              }, 
              "queues": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "items": {
                  "$ref": "BatchQueue"
                }, 
                "name": "queues", 
                "type": "array"
              }, 
              "revision": {
                "description": "The number of times this app has been updated.", 
                "name": "revision", 
                "type": "int"
              }, 
              "scheduler": {
                "description": "The type of scheduled used to run jobs.", 
                "enum": [
                  "COBALT", 
                  "CONDOR", 
                  "FORK", 
                  "LOADLEVELER", 
                  "LSF", 
                  "MOAB", 
                  "PBS", 
                  "SGE", 
                  "SLURM", 
                  "TORQUE", 
                  "UNKNOWN"
                ], 
                "name": "scheduler", 
                "type": "string"
              }, 
              "scratchDir": {
                "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.", 
                "name": "scratchDir", 
                "type": "string"
              }, 
              "site": {
                "description": "The site associated with this system.", 
                "name": "site", 
                "type": "string"
              }, 
              "startupScript": {
                "description": "Script to be run after login and prior to execution.", 
                "name": "startupScript", 
                "type": "string"
              }, 
              "status": {
                "description": "The status of this system. Systems must be in UP status to be used.", 
                "enum": [
                  "UP", 
                  "DOWN", 
                  "UNKNOWN"
                ], 
                "name": "status", 
                "type": "string"
              }, 
              "storage": {
                "description": "The storage config defining how to connect to this system for data staging.", 
                "name": "storage", 
                "type": "StorageConfig"
              }, 
              "type": {
                "description": "The type of this system.", 
                "enum": [
                  "EXECUTION", 
                  "STORAGE"
                ], 
                "name": "type", 
                "type": "string"
              }, 
              "uuid": {
                "description": "The uuid of this system.", 
                "name": "uuid", 
                "type": "string"
              }, 
              "workDir": {
                "description": "The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.", 
                "name": "workDir", 
                "type": "string"
              }
            }, 
            "subTypes": [
              "StorageSystem", 
              "ExecutionSystem"
            ]
          }, 
          "SystemCredentialsResponse": {
            "id": "SystemCredentialsResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "StoredCredential"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SystemOperationRequest": {
            "id": "SystemOperationRequest", 
            "name": "", 
            "properties": {
              "action": {
                "description": "Action to perform on the system.", 
                "enum": [
                  "ENABLE", 
                  "DISABLE", 
                  "PUBLISH", 
                  "UNPUBLISH", 
                  "SETDEFAULT", 
                  "UNSETDEFAULT", 
                  "SETGLOBALDEFAULT", 
                  "UNSETGLOBALDEFAULT", 
                  "CLONE"
                ], 
                "name": "action", 
                "required": true, 
                "type": "string"
              }, 
              "id": {
                "description": "The new system id of the cloned system", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "SystemRequest": {
            "discriminator": "type", 
            "id": "SystemRequest", 
            "name": "", 
            "properties": {
              "description": {
                "description": "Verbose description of this system.", 
                "name": "description", 
                "type": "string"
              }, 
              "environment": {
                "description": "Environment variables to set upon login prior to job submission.", 
                "name": "environment", 
                "type": "string"
              }, 
              "executionType": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "enum": [
                  "HPC", 
                  "CONDOR", 
                  "CLI"
                ], 
                "name": "executionType", 
                "required": true, 
                "type": "string"
              }, 
              "id": {
                "description": "Unique identifier for this system.", 
                "name": "id", 
                "type": "string"
              }, 
              "login": {
                "description": "The login config defining how to connect to this system for job submission.", 
                "name": "login", 
                "required": true, 
                "type": "LoginConfig"
              }, 
              "maxSystemJobs": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues.", 
                "format": "int32", 
                "name": "maxSystemJobs", 
                "type": "int"
              }, 
              "maxSystemJobsPerUser": {
                "description": "The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.", 
                "format": "int32", 
                "name": "maxSystemJobsPerUser", 
                "type": "int"
              }, 
              "name": {
                "description": "Common name for this system.", 
                "name": "name", 
                "required": true, 
                "type": "string"
              }, 
              "queues": {
                "description": "The execution paradigm used to run jobs on this system.", 
                "items": {
                  "$ref": "BatchQueue"
                }, 
                "name": "queues", 
                "required": true, 
                "type": "array"
              }, 
              "scheduler": {
                "description": "The type of scheduled used to run jobs.", 
                "enum": [
                  "COBALT", 
                  "CONDOR", 
                  "FORK", 
                  "LOADLEVELER", 
                  "LSF", 
                  "MOAB", 
                  "PBS", 
                  "SGE", 
                  "SLURM", 
                  "TORQUE", 
                  "UNKNOWN"
                ], 
                "name": "scheduler", 
                "required": true, 
                "type": "string"
              }, 
              "scratchDir": {
                "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.", 
                "name": "scratchDir", 
                "type": "string"
              }, 
              "site": {
                "description": "The site associated with this system.", 
                "name": "site", 
                "type": "string"
              }, 
              "startupScript": {
                "description": "Script to be run after login and prior to execution.", 
                "name": "startupScript", 
                "type": "string"
              }, 
              "status": {
                "description": "The status of this system. Systems must be in UP status to be used.", 
                "enum": [
                  "UP", 
                  "DOWN", 
                  "UNKNOWN"
                ], 
                "name": "status", 
                "required": true, 
                "type": "string"
              }, 
              "storage": {
                "description": "The storage config defining how to connect to this system for data staging.", 
                "name": "storage", 
                "required": true, 
                "type": "StorageConfig"
              }, 
              "type": {
                "description": "The type of this system.", 
                "enum": [
                  "EXECUTION", 
                  "STORAGE"
                ], 
                "name": "type", 
                "required": true, 
                "type": "string"
              }, 
              "workDir": {
                "description": "The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.", 
                "name": "workDir", 
                "type": "string"
              }
            }, 
            "required": [
              "id", 
              "storage", 
              "name", 
              "status", 
              "type"
            ], 
            "subTypes": [
              "StorageSystem", 
              "ExecutionSystem"
            ]
          }, 
          "SystemRole": {
            "id": "SystemRole", 
            "name": "", 
            "properties": {
              "role": {
                "description": "The role granted this user.", 
                "enum": [
                  "USER", 
                  "PUBLISHER", 
                  "ADMIN", 
                  "OWNER"
                ], 
                "name": "role", 
                "type": "string"
              }, 
              "username": {
                "description": "The username of the api user granted this role.", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "SystemSummary": {
            "id": "SystemSummary", 
            "name": "", 
            "properties": {
              "default": {
                "description": "Is the system the default for the authenticated user?", 
                "name": "default", 
                "type": "boolean"
              }, 
              "description": {
                "description": "Verbose description of this system.", 
                "name": "description", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique identifier for this system.", 
                "name": "id", 
                "type": "string"
              }, 
              "name": {
                "description": "Common name for this system.", 
                "name": "name", 
                "type": "string"
              }, 
              "public": {
                "description": "Is the system publicly available?", 
                "name": "public", 
                "type": "boolean"
              }, 
              "status": {
                "description": "The status of this system. Systems must be in UP status to be used.", 
                "enum": [
                  "UP", 
                  "DOWN", 
                  "UNKNOWN"
                ], 
                "name": "status", 
                "type": "string"
              }, 
              "type": {
                "description": "The type of this system.", 
                "enum": [
                  "EXECUTION", 
                  "STORAGE"
                ], 
                "name": "type", 
                "type": "string"
              }
            }
          }, 
          "UserCredential": {
            "id": "UserCredential", 
            "name": "", 
            "properties": {
              "credential": {
                "description": "The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..", 
                "name": "credential", 
                "type": "string"
              }, 
              "internalUsername": {
                "description": "The username of the internal user associated with this credential.", 
                "name": "internalUsername", 
                "type": "string"
              }, 
              "password": {
                "description": "The password on the remote system used to authenticate.", 
                "name": "password", 
                "type": "string"
              }, 
              "privateKey": {
                "description": "The public ssh key used to authenticate to the remote system..", 
                "name": "privateKey", 
                "type": "string"
              }, 
              "publicKey": {
                "description": "The public ssh key used to authenticate to the remote system.", 
                "name": "publicKey", 
                "type": "string"
              }, 
              "server": {
                "description": "The server from which a credential may be obtained.", 
                "name": "server", 
                "type": "UserCredentialServer"
              }, 
              "type": {
                "description": "The authentication type.", 
                "enum": [
                  "LOCAL", 
                  "PAM", 
                  "PASSWORD", 
                  "SSHKEYS", 
                  "TOKEN", 
                  "X509"
                ], 
                "name": "type", 
                "required": true, 
                "type": "string"
              }, 
              "username": {
                "description": "The local username on the remote system used to authenticate.", 
                "name": "username", 
                "type": "string"
              }
            }
          }, 
          "UserCredentialServer": {
            "id": "UserCredentialServer", 
            "name": "", 
            "properties": {
              "endpoint": {
                "description": "The hostname or ip address of the remote server.", 
                "name": "endpoint", 
                "required": true, 
                "type": "string"
              }, 
              "port": {
                "description": "The port number of the remote server..", 
                "format": "int32", 
                "name": "port", 
                "required": true, 
                "type": "int"
              }, 
              "protocol": {
                "description": "The protocol used to obtain a credential from the remote server.", 
                "enum": [
                  "MYPROXY", 
                  "OA4MP"
                ], 
                "name": "protocol", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/systems/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Register and manage systems", 
      "name": "systems", 
      "path": "/systems", 
      "url": "http://localhost:9999/systems"
    }, 
    {
      "api_declaration": {
        "apiVersion": "2.2.14", 
        "apis": [
          {
            "description": "Get a list of all available transforms", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "", 
                "parameters": [], 
                "summary": "Find all transforms for use within the api.", 
                "type": "MultipleTransformResponse"
              }
            ], 
            "path": "/transforms/v2/"
          }, 
          {
            "description": "Get information about a specific transform.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "This will perform a partial match on the name value returning everything with the given string in the name.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the transform requested.", 
                    "name": "transformId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Find all transforms matching the given name.", 
                "type": "MultipleTransformResponse"
              }
            ], 
            "path": "/transforms/v2/{transformId}"
          }, 
          {
            "description": "Query for transforms available for a specific file", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "transformAndStage", 
                "notes": "This allows you to fire and forget a data transform and staging task.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the transform to apply to the given file.", 
                    "name": "transformId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The name of the api user owning the file at the given path.", 
                    "name": "owner", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path to the file to be transformed and staged", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"url\": \"agave://demo.storage.example.com/apps/wc-1.00/picksumipsum.txt\",\n\t\"callbackUrl\": \"psherman@wallabydentistry.com.au\",\n\t\"nativeFormat\": \"raw\"\n}", 
                    "description": "The transfer request details.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "TransformRequest"
                  }
                ], 
                "summary": "Transform a file and stage it to a specified location.", 
                "type": "MultipleTransformResponse"
              }
            ], 
            "path": "/transforms/v2/{transformId}/async/{owner}/{filePath}"
          }, 
          {
            "description": "Transform and download files.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "transformAndDownload", 
                "notes": "This allows you to synchronously transform and download a file. The download blocks until the transform has completed, so use caution when choosing this service as it is likely to time out for larger files.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The name of the transform to apply to the given file.", 
                    "name": "transformId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The name of the api user owning the file at the given path.", 
                    "name": "owner", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The path to the file to be transformed and downloaded.", 
                    "name": "filePath", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "{\n\t\"url\": \"agave://demo.storage.example.com/apps/wc-1.00/picksumipsum.txt\",\n\t\"callbackUrl\": \"psherman@wallabydentistry.com.au\",\n\t\"nativeFormat\": \"raw\"\n}", 
                    "description": "The transfer request details.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "TransformRequest"
                  }
                ], 
                "produces": [
                  "application/octet-stream"
                ], 
                "summary": "Transform a file and download it directly.", 
                "type": "void"
              }
            ], 
            "path": "/transforms/v2/{transformId}/sync/{owner}/{filePath}"
          }, 
          {
            "description": "Operations on a specific user.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listByTag", 
                "notes": "This will perform a partial match on the tag value returning everything with the given string in the tag.", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The tag to search for transforms on.", 
                    "name": "tag", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Find all transforms with the given tag.", 
                "type": "MultipleTransformResponse"
              }
            ], 
            "path": "/transforms/v2/tags/{tag}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "Decoder": {
            "id": "Decoder", 
            "name": "", 
            "properties": {
              "description": {
                "description": "The description of what this decoder is and what it does.", 
                "name": "description", 
                "type": "string"
              }, 
              "name": {
                "description": "The decoder name.", 
                "name": "name", 
                "type": "string"
              }
            }
          }, 
          "Encoder": {
            "id": "Encoder", 
            "name": "", 
            "properties": {
              "description": {
                "description": "The description of what this encoder is and what it does.", 
                "name": "description", 
                "type": "string"
              }, 
              "name": {
                "description": "The encoder name.", 
                "name": "name", 
                "type": "string"
              }
            }
          }, 
          "MultipleTransformResponse": {
            "id": "MultipleTransformResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Transform"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleTransformResponse": {
            "id": "SingleTransformResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Transform"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Transform": {
            "id": "Transform", 
            "name": "", 
            "properties": {
              "decoders": {
                "description": "The available decoders for this transform.", 
                "items": {
                  "$ref": "Decoder"
                }, 
                "name": "decoders", 
                "type": "array"
              }, 
              "description": {
                "description": "Description of this transform.", 
                "name": "description", 
                "type": "string"
              }, 
              "descriptionurl": {
                "description": "The URL to find out more information.", 
                "name": "descriptionurl", 
                "type": "string"
              }, 
              "enabled": {
                "description": "Whether this transform is enabled or not.", 
                "name": "enabled", 
                "type": "boolean"
              }, 
              "encoder": {
                "description": "The encoder to use to convert to this format.", 
                "name": "encoder", 
                "type": "Encoder"
              }, 
              "name": {
                "description": "The name of this transform.", 
                "name": "name", 
                "type": "string"
              }, 
              "tags": {
                "description": "The tags describing this transform.", 
                "items": {
                  "type": "string"
                }, 
                "name": "tags", 
                "type": "array"
              }
            }
          }, 
          "TransformRequest": {
            "id": "TransformRequest", 
            "name": "", 
            "properties": {
              "callbackUrl": {
                "description": "The URI to notify when the transfer is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}", 
                "name": "callbackUrl", 
                "type": "string"
              }, 
              "nativeFormat": {
                "description": "The original file type of the file. If not given, the file type is assumed to be raw.", 
                "name": "nativeFormat", 
                "type": "string"
              }, 
              "url": {
                "description": "The uri to which the transformed file will be staged.", 
                "name": "url", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/transforms/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Transform and stage data", 
      "name": "transforms", 
      "path": "/transforms", 
      "url": "http://localhost:9999/transforms"
    }, 
    {
      "api_declaration": {
        "apiVersion": "0.5.2", 
        "apis": [
          {
            "description": "Retrieve a (paginated) list of actors.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "list", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "List actors", 
                "type": "MultipleActorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "add", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the actor to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "Actor"
                  }
                ], 
                "summary": "Register an actor.", 
                "type": "SingleActorResponse"
              }
            ], 
            "path": "/actors/v2"
          }, 
          {
            "description": "Manage a specific actor.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "get", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Retrieve details about a specific actor.", 
                "type": "SingleActorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "update", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the actor to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "Actor"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Retrieve details about a specific actor.", 
                "type": "SingleActorResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "delete", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Delete a specific actor.", 
                "type": "EmptyActorResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}"
          }, 
          {
            "description": "Work with actor messages.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getMessages", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Get the current number of messages for an actor.", 
                "type": "ActorMessagesResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "sendMessage", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "Optional dictionary of environmental variables", 
                    "name": "environment", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "dict"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the message to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "MessageRequest"
                  }
                ], 
                "summary": "Send a message to an actor mailbox.", 
                "type": "ActorMessageRequestResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/messages"
          }, 
          {
            "description": "Work with actor workers.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listWorkers", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "List the current workers for an actor.", 
                "type": "MultipleActorWorkerResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addWorker", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the workers to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "AddWorkersRequest"
                  }
                ], 
                "summary": "Add a worker to an actor.", 
                "type": "ActorWorkersRequestResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/workers"
          }, 
          {
            "description": "Work with a specific worker.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getWorker", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the worker.", 
                    "name": "workerId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Get the details about a specific worker for an actor.", 
                "type": "SingleActorWorkerResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteWorker", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the worker.", 
                    "name": "workerId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Delete a worker.", 
                "type": "EmptyActorWorkerRequestResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/workers/{workerId}"
          }, 
          {
            "description": "Work with actor nonces.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listNonces", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "List the current nonces for an actor.", 
                "type": "MultipleActorNonceResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addNonce", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the nonce to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": false, 
                    "type": "AddNonceRequest"
                  }
                ], 
                "summary": "Add a nonce to an actor.", 
                "type": "ActorNonceRequestResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/nonces"
          }, 
          {
            "description": "Work with a specific nonce.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getNonce", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the nonce.", 
                    "name": "nonceId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Get the details about a specific nonce for an actor.", 
                "type": "SingleActorNonceResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteNonce", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the nonce.", 
                    "name": "nonceId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Delete a nonce.", 
                "type": "EmptyActorNonceRequestResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/nonces/{nonceId}"
          }, 
          {
            "description": "Worker with actor executions.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listExecutions", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Summary data of all actor executions.", 
                "type": "ExecutionsSummaryResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addExecution", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the actor execution to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ActorExecution"
                  }
                ], 
                "summary": "Register an actor execution.", 
                "type": "SingleActorExecutionResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/executions"
          }, 
          {
            "description": "Manage a specific execution for a specific actor.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getExecution", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the execution.", 
                    "name": "executionId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Retrieve details about a specific actor execution.", 
                "type": "SingleActorExecutionResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/executions/{executionId}"
          }, 
          {
            "description": "Manage logs for a specific execution.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getExecutionLogs", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the actor.", 
                    "name": "actorId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the execution.", 
                    "name": "executionId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the actor database"
                  }
                ], 
                "summary": "Get logs for a specific actor execution.", 
                "type": "ExecutionLogsResponse"
              }
            ], 
            "path": "/actors/v2/{actorId}/executions/{executionId}/logs"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "Actor": {
            "id": "Actor", 
            "name": "", 
            "properties": {
              "defaultEnvironment": {
                "description": "Default environmental variables and values.", 
                "name": "defaultEnvironment", 
                "type": "dict"
              }, 
              "description": {
                "description": "Description of this actor.", 
                "name": "description", 
                "type": "string"
              }, 
              "id": {
                "description": "The unique id of the actor.", 
                "name": "id", 
                "type": "string"
              }, 
              "image": {
                "description": "Docker image associated with the actor.", 
                "name": "image", 
                "type": "string"
              }, 
              "owner": {
                "description": "username of the owner of the actor.", 
                "name": "owner", 
                "type": "string"
              }, 
              "privileged": {
                "description": "Whether this actor runs in privileged mode.", 
                "name": "privileged", 
                "type": "boolean"
              }, 
              "stateless": {
                "description": "Whether the actor stores private state.", 
                "name": "stateless", 
                "type": "boolean"
              }, 
              "status": {
                "description": "Current status of the actor.", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ActorMessageRequestResponse": {
            "id": "ActorMessageRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ActorMessageResponse"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ActorMessageResponse": {
            "id": "ActorMessageResponse", 
            "name": "", 
            "properties": {
              "executionId": {
                "description": "The id of the resulting execution.", 
                "name": "executionId", 
                "type": "string"
              }, 
              "msg": {
                "description": "The message variable for the execution.", 
                "name": "msg", 
                "type": "string"
              }
            }
          }, 
          "ActorMessages": {
            "id": "ActorMessages", 
            "name": "", 
            "properties": {
              "messages": {
                "description": "The number of messages waiting in queue to be processed by this actor.", 
                "name": "messages", 
                "type": "int"
              }
            }
          }, 
          "ActorMessagesResponse": {
            "id": "ActorMessagesResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ActorMessages"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ActorNonce": {
            "id": "ActorNonce", 
            "name": "", 
            "properties": {
              "actor_id": {
                "description": "Actor id associated with nonce.", 
                "name": "actor_id", 
                "type": "string"
              }, 
              "create_time": {
                "description": "Time stamp when nonce was created.", 
                "name": "create_time", 
                "type": "string"
              }, 
              "id": {
                "description": "The unique id of the nonce.", 
                "name": "id", 
                "type": "string"
              }, 
              "last_use_time": {
                "description": "Last time nonce was used.", 
                "name": "last_use_time", 
                "type": "string"
              }, 
              "level": {
                "description": "Permission level associated with nonce.", 
                "name": "level", 
                "type": "string"
              }, 
              "max_uses": {
                "description": "Max number of uses for this nonce.", 
                "name": "max_uses", 
                "type": "string"
              }, 
              "remaining_uses": {
                "description": "Remaining uses of nonce.", 
                "name": "remaining_uses", 
                "type": "int"
              }
            }
          }, 
          "ActorNonceRequestResponse": {
            "id": "ActorNonceRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "EmptyActorNonceRequestResponse"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ActorWorker": {
            "id": "ActorWorker", 
            "name": "", 
            "properties": {
              "cid": {
                "description": "Container id of this worker.", 
                "name": "cid", 
                "type": "string"
              }, 
              "host_id": {
                "description": "id of the host where this worker is running.", 
                "name": "host_id", 
                "type": "string"
              }, 
              "host_ip": {
                "description": "IP address of the host where this worker is running.", 
                "name": "host_id", 
                "type": "string"
              }, 
              "id": {
                "description": "The unique id of this worker.", 
                "name": "id", 
                "type": "string"
              }, 
              "image": {
                "description": "Docker image associated with the actor.", 
                "name": "image", 
                "type": "string"
              }, 
              "last_execution": {
                "description": "Last execution for this worker.", 
                "name": "last_execution", 
                "type": "int"
              }, 
              "location": {
                "description": "Location of docker daemon that this worker is using.", 
                "name": "location", 
                "type": "string"
              }, 
              "status": {
                "description": "status of the worker.", 
                "name": "status", 
                "type": "string"
              }, 
              "tenant": {
                "description": "tenant this worker belongs to.", 
                "name": "tenant", 
                "type": "string"
              }
            }
          }, 
          "ActorWorkersRequestResponse": {
            "id": "ActorWorkersRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "EmptyActorWorkerRequestResponse"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "AddNonceRequest": {
            "id": "AddNonceRequest", 
            "name": "", 
            "properties": {
              "level": {
                "description": "Permissions level associated with this nonce (default is EXECUTE).", 
                "name": "num", 
                "type": "string"
              }, 
              "maxUses": {
                "description": "Max number of times nonce can be redeemed.", 
                "name": "num", 
                "type": "int"
              }
            }
          }, 
          "AddWorkersRequest": {
            "id": "AddWorkersRequest", 
            "name": "", 
            "properties": {
              "num": {
                "description": "The number of workers to ensure are running.", 
                "name": "num", 
                "type": "int"
              }
            }
          }, 
          "EmptyActorNonceRequestResponse": {
            "id": "EmptyActorNonceRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyActorResponse": {
            "id": "EmptyActorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyActorWorkerRequestResponse": {
            "id": "EmptyActorWorkerRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Execution": {
            "id": "Execution", 
            "name": "", 
            "properties": {
              "actorId": {
                "description": "The id of the associated actor.", 
                "name": "actorId", 
                "type": "string"
              }, 
              "cpu": {
                "description": "CPU usage, in user jiffies, of this execution.", 
                "name": "cpu", 
                "type": "int"
              }, 
              "id": {
                "description": "The id of this executions.", 
                "name": "id", 
                "type": "string"
              }, 
              "io": {
                "description": "Block I/O usage, in number of 512-byte sectors read from and written to, by this execution.", 
                "name": "io", 
                "type": "int"
              }, 
              "owner": {
                "description": "username of the owner of the actor.", 
                "name": "owner", 
                "type": "string"
              }, 
              "runtime": {
                "description": "Runtime, in milliseconds, of this execution.", 
                "name": "runtime", 
                "type": "int"
              }, 
              "status": {
                "description": "status of the execution.", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ExecutionLogs": {
            "id": "ExecutionLogs", 
            "name": "", 
            "properties": {
              "logs": {
                "description": "The logs (standard out) of this execution.", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "ExecutionLogsResponse": {
            "id": "ExecutionLogsResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ExecutionLogs"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ExecutionsSummary": {
            "id": "ExecutionsSummary", 
            "name": "", 
            "properties": {
              "actorId": {
                "description": "The id of the associated actor.", 
                "name": "actorId", 
                "type": "string"
              }, 
              "ids": {
                "description": "The ids of all executions.", 
                "items": {
                  "type": "string"
                }, 
                "name": "ids", 
                "type": "array"
              }, 
              "owner": {
                "description": "username of the owner of the actor.", 
                "name": "owner", 
                "type": "string"
              }, 
              "totalCpu": {
                "description": "CPU usage, in user jiffies, of all executions.", 
                "name": "totalCpu", 
                "type": "int"
              }, 
              "totalIo": {
                "description": "Block I/O usage, in number of 512-byte sectors read from and written to, by all executions.", 
                "name": "totalIo", 
                "type": "int"
              }, 
              "totalRuntime": {
                "description": "Runtime, in milliseconds, of all executions.", 
                "name": "totalRuntime", 
                "type": "int"
              }
            }
          }, 
          "ExecutionsSummaryResponse": {
            "id": "ExecutionsSummaryResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ExecutionsSummary"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MessageRequest": {
            "id": "MessageRequest", 
            "name": "", 
            "properties": {
              "message": {
                "description": "The message to send to the actor.", 
                "name": "message", 
                "type": "string"
              }
            }
          }, 
          "MultipleActorNonceResponse": {
            "id": "MultipleActorNonceResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "ActorNonce"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleActorResponse": {
            "id": "MultipleActorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Actor"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleActorWorkerResponse": {
            "id": "MultipleActorWorkerResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "ActorWorker"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleExecutionResponse": {
            "id": "MultipleExecutionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Execution"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleActorExecutionResponse": {
            "id": "SingleActorExecutionResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Execution"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleActorNonceResponse": {
            "id": "SingleActorNonceResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ActorNonce"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleActorResponse": {
            "id": "SingleActorResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Actor"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleActorWorkerResponse": {
            "id": "SingleActorWorkerResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ActorWorker"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/actors/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Create and manage actors.", 
      "name": "actors", 
      "path": "/actors", 
      "url": "http://localhost:9999/actors"
    }, 
    {
      "api_declaration": {
        "apiVersion": "0.1", 
        "apis": [
          {
            "description": "Retrieve a (paginated) list of service accounts.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listAccounts", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "List service accounts", 
                "type": "MultipleServiceAccountsResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the service account to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ServiceAccount"
                  }
                ], 
                "summary": "Register a service account.", 
                "type": "SingleServiceAccountResponse"
              }
            ], 
            "path": "/admin/v2/service_accounts"
          }, 
          {
            "description": "Manage a specific service account.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Retrieve details about a specific service account.", 
                "type": "SingleServiceAccountResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "updateAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the service account to update.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ServiceAccount"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Update a specific service account.", 
                "type": "SingleServiceAccountResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Delete a specific service account.", 
                "type": "EmptyServiceAccountResponse"
              }
            ], 
            "path": "/admin/v2/service_accounts/{accountId}"
          }, 
          {
            "description": "Work with the roles occupied by a service account.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listAccountRoles", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "List the roles occupied by a service account.", 
                "type": "ServiceAccountRolesResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addRoleToAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the role to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "AddRoleToAccountRequest"
                  }
                ], 
                "summary": "Add a role to a service account.", 
                "type": "AddRoleToAccountRequestResponse"
              }
            ], 
            "path": "/admin/v2/service_accounts/{accountId}/roles"
          }, 
          {
            "description": "Work with a specific role of a service account.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteRoleFromAccount", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Delete a role from the list of occupied roles of a service account.", 
                "type": "EmptyServiceAccountRoleResponse"
              }
            ], 
            "path": "/admin/v2/service_accounts/{accountId}/roles/{roleId}"
          }, 
          {
            "description": "Retrieve a (paginated) list of service roles.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listRoles", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "List service roles.", 
                "type": "MultipleRolesResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the service role to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "Role"
                  }
                ], 
                "summary": "Register a service role.", 
                "type": "SingleRoleResponse"
              }
            ], 
            "path": "/admin/v2/service_roles"
          }, 
          {
            "description": "Manage a specific service role.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Retrieve details about a specific service role.", 
                "type": "SingleRoleResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Delete a specific service role.", 
                "type": "EmptyRoleResponse"
              }
            ], 
            "path": "/admin/v2/service_roles/{roleId}"
          }, 
          {
            "description": "Work with the service account that occupy a role.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listAccountsInRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Get the service accounts that occupy a service role.", 
                "type": "ServiceRoleAccountsResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addAccountToRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the service account to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "AddServiceAccountToRoleRequest"
                  }
                ], 
                "summary": "Add a service account to a role.", 
                "type": "AddServiceAccountToRoleResponse"
              }
            ], 
            "path": "/admin/v2/service_roles/{roleId}/service_accounts"
          }, 
          {
            "description": "Work with a specific role of a service account.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteAccountFromRole", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service role.", 
                    "name": "roleId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "description": "The id of the service account.", 
                    "name": "accountId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "summary": "Delete a service from the list of accounts occupying a service role.", 
                "type": "EmptyRoleServiceAccountResponse"
              }
            ], 
            "path": "/admin/v2/service_roles/{roleId}/service_accounts/{accountId}"
          }, 
          {
            "description": "Retrieve a (paginated) list of OAuth clients.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listClients", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "List clients.", 
                "type": "MultipleClientsResponse"
              }
            ], 
            "path": "/admin/v2/clients"
          }, 
          {
            "description": "Retrieve a (paginated) list of APIs.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "listApis", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": 250, 
                    "description": "The max number of results.", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "limit", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": 0, 
                    "description": "The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)", 
                    "format": "int32", 
                    "min": 0, 
                    "name": "offset", 
                    "paramType": "query", 
                    "required": false, 
                    "type": "integer"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "List APIs.", 
                "type": "MultipleApiResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "POST", 
                "nickname": "addApi", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The description of the API to add.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApiRequestBody"
                  }
                ], 
                "summary": "Register an API.", 
                "type": "SingleApiResponse"
              }
            ], 
            "path": "/admin/v2/apis"
          }, 
          {
            "description": "Manage a specific API.", 
            "has_websocket": false, 
            "operations": [
              {
                "is_websocket": false, 
                "method": "GET", 
                "nickname": "getApi", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the API.", 
                    "name": "apiId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Retrieve details about a specific API.", 
                "type": "SingleApiResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "DELETE", 
                "nickname": "deleteApi", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the API.", 
                    "name": "apiId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Delete a specific API.", 
                "type": "EmptyApiResponse"
              }, 
              {
                "is_websocket": false, 
                "method": "PUT", 
                "nickname": "updateApiStatus", 
                "notes": "", 
                "parameters": [
                  {
                    "allowMultiple": false, 
                    "description": "The id of the API.", 
                    "name": "apiId", 
                    "paramType": "path", 
                    "required": true, 
                    "type": "string"
                  }, 
                  {
                    "allowMultiple": false, 
                    "defaultValue": "", 
                    "description": "The new status for the API.", 
                    "name": "body", 
                    "paramType": "body", 
                    "required": true, 
                    "type": "ApiStatus"
                  }
                ], 
                "responseMessages": [
                  {
                    "code": 403, 
                    "message": "Failed to authenticate the user"
                  }, 
                  {
                    "code": 500, 
                    "message": "The service was unable to query the admin database"
                  }
                ], 
                "summary": "Update a specific API.", 
                "type": "SingleApiResponse"
              }
            ], 
            "path": "/admin/v2/apis/{apiId}"
          }
        ], 
        "authorizations": [
          "oauth2"
        ], 
        "basePath": "https://api.tacc.cloud", 
        "models": {
          "AddRoleToAccountRequest": {
            "id": "AddRoleToAccountRequest", 
            "name": "", 
            "properties": {
              "role_id": {
                "description": "The id of the role to add to the service account.", 
                "name": "role_id", 
                "type": "string"
              }
            }
          }, 
          "AddRoleToAccountRequestResponse": {
            "id": "AddRoleToAccountRequestResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ServiceAccount"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "AddServiceAccountToRoleRequest": {
            "id": "AddServiceAccountToRoleRequest", 
            "name": "", 
            "properties": {
              "role_id": {
                "description": "The id of the service account to add to the role.", 
                "name": "account_id", 
                "type": "string"
              }
            }
          }, 
          "AddServiceAccountToRoleResponse": {
            "id": "AddServiceAccountToRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "RoleDetails"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Api": {
            "id": "Api", 
            "name": "", 
            "properties": {
              "context": {
                "description": "Root path (context) for the API, starting with a slash character.", 
                "name": "context", 
                "type": "string"
              }, 
              "environments": {
                "description": "Environments in which the API is available.", 
                "name": "environments", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique id of the API.", 
                "name": "id", 
                "type": "string"
              }, 
              "name": {
                "description": "Name of the API, also used as part of the id.", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "Account name of the owner of the API.", 
                "name": "owner", 
                "type": "string"
              }, 
              "resources": {
                "description": "List of API resources which provide auth and throttling information for the API.", 
                "items": {
                  "$ref": "ApiResource"
                }, 
                "name": "resources", 
                "type": "array"
              }, 
              "status": {
                "description": "Publication status of the API.", 
                "name": "status", 
                "type": "string"
              }, 
              "templates": {
                "description": "List of API template tuples which provide the mappings from the frontend to the backend.", 
                "items": {
                  "$ref": "ApiTemplate"
                }, 
                "name": "templates", 
                "type": "array"
              }, 
              "version": {
                "description": "Platform version of the API.", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "ApiRequestBody": {
            "id": "ApiRequestBody", 
            "name": "", 
            "properties": {
              "api_name": {
                "description": "Name of the API, which will also be used to identify the API.", 
                "name": "api_name", 
                "type": "string"
              }, 
              "auth": {
                "description": "List of quth type per method from (none, oauth). Can also be single string for all methods.", 
                "items": {
                  "$ref": "string"
                }, 
                "name": "auth", 
                "type": "array"
              }, 
              "context": {
                "description": "Root path (context) for the API, starting with a slash character.", 
                "name": "context", 
                "type": "string"
              }, 
              "methods": {
                "description": "List of allowed methods from (GET, POST, PUT, DELETE, HEAD).", 
                "items": {
                  "$ref": "string"
                }, 
                "name": "methods", 
                "type": "array"
              }, 
              "roles": {
                "description": "List of required roles to subscribe to API (required when visibility is 'restricted')", 
                "items": {
                  "$ref": "string"
                }, 
                "name": "roles", 
                "type": "array"
              }, 
              "url": {
                "description": "Fully qualified production URL for the backend service (should include http or https).", 
                "name": "url", 
                "type": "string"
              }, 
              "visibility": {
                "description": "Optionally set the visibility to 'public' or 'restricted' (default is public).", 
                "name": "visibility", 
                "type": "string"
              }
            }
          }, 
          "ApiResource": {
            "id": "ApiResource", 
            "name": "", 
            "properties": {
              "http_verbs": {
                "description": "Http verbs and associated auth.", 
                "name": "http_verbs", 
                "type": "dict"
              }, 
              "url_pattern": {
                "description": "URL pattern associated with the resource..", 
                "name": "url_pattern", 
                "type": "string"
              }
            }
          }, 
          "ApiStatus": {
            "id": "ApiStatus", 
            "name": "", 
            "properties": {
              "status": {
                "description": "Status of the API: one of (CREATED, PUBLISHED, RETIRED).", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ApiSummary": {
            "id": "ApiSummary", 
            "name": "", 
            "properties": {
              "id": {
                "description": "Unique id of the API.", 
                "name": "id", 
                "type": "string"
              }, 
              "name": {
                "description": "Name of the API, also used as part of the id.", 
                "name": "name", 
                "type": "string"
              }, 
              "owner": {
                "description": "Account name of the owner of the API.", 
                "name": "owner", 
                "type": "string"
              }, 
              "status": {
                "description": "Publication status of the API.", 
                "name": "status", 
                "type": "string"
              }, 
              "version": {
                "description": "Platform version of the API.", 
                "name": "version", 
                "type": "string"
              }
            }
          }, 
          "ApiTemplate": {
            "id": "ApiTemplate", 
            "name": "", 
            "properties": {
              "methods": {
                "description": "Methods associated with the template.", 
                "name": "methods", 
                "type": "string"
              }, 
              "roles": {
                "description": "roles associated with the template.", 
                "name": "roles", 
                "type": "string"
              }, 
              "route": {
                "description": "Path of the template.", 
                "name": "route", 
                "type": "string"
              }, 
              "tiers": {
                "description": "Throttling tiers associated with the template.", 
                "name": "tiers", 
                "type": "string"
              }
            }
          }, 
          "Client": {
            "id": "Client", 
            "name": "", 
            "properties": {
              "clientName": {
                "description": "Name of the client.", 
                "name": "clientName", 
                "type": "string"
              }, 
              "id": {
                "description": "Unique id of the client.", 
                "name": "id", 
                "type": "string"
              }, 
              "owner": {
                "description": "Account name of the owner of the client.", 
                "name": "owner", 
                "type": "string"
              }
            }
          }, 
          "EmptyApiResponse": {
            "id": "EmptyApiResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyRoleResponse": {
            "id": "EmptyRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyRoleServiceAccountResponse": {
            "id": "EmptyRoleServiceAccountResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyServiceAccountResponse": {
            "id": "EmptyServiceAccountResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "EmptyServiceAccountRoleResponse": {
            "id": "EmptyServiceAccountRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "String"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleApiResponse": {
            "id": "MultipleApiResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "ApiSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleClientsResponse": {
            "id": "MultipleClientsResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "Client"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleRolesResponse": {
            "id": "MultipleRolesResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "RoleSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "MultipleServiceAccountsResponse": {
            "id": "MultipleServiceAccountsResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "description": "response body", 
                "items": {
                  "$ref": "ServiceAccountSummary"
                }, 
                "name": "result", 
                "type": "array"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "Role": {
            "id": "Role", 
            "name": "", 
            "properties": {
              "id": {
                "description": "The unique id of the role.", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "RoleDetails": {
            "id": "RoleDetails", 
            "name": "", 
            "properties": {
              "accounts": {
                "description": "service accounts that occupy this role.", 
                "items": {
                  "$ref": "string"
                }, 
                "name": "accounts", 
                "type": "array"
              }, 
              "id": {
                "description": "The unique id of the role.", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "RoleSummary": {
            "id": "RoleSummary", 
            "name": "", 
            "properties": {
              "id": {
                "description": "The unique id of the role.", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "ServiceAccount": {
            "id": "ServiceAccount", 
            "name": "", 
            "properties": {
              "id": {
                "description": "The unique id of the service account.", 
                "name": "accountId", 
                "type": "string"
              }, 
              "password": {
                "description": "The password for the service account.", 
                "name": "password", 
                "type": "string"
              }, 
              "roles": {
                "description": "roles occupied by service account.", 
                "items": {
                  "$ref": "string"
                }, 
                "name": "roles", 
                "type": "array"
              }
            }
          }, 
          "ServiceAccountRoleResponse": {
            "id": "ServiceAccountRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "RoleDetails"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ServiceAccountRolesResponse": {
            "id": "ServiceAccountRolesResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ServiceAccount"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "ServiceAccountSummary": {
            "id": "ServiceAccountSummary", 
            "name": "", 
            "properties": {
              "id": {
                "description": "The unique id of the service account.", 
                "name": "id", 
                "type": "string"
              }
            }
          }, 
          "ServiceRoleAccountsResponse": {
            "id": "ServiceRoleAccountsResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "RoleDetails"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleApiResponse": {
            "id": "SingleApiResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "Api"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleRoleResponse": {
            "id": "SingleRoleResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "RoleDetails"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }, 
          "SingleServiceAccountResponse": {
            "id": "SingleServiceAccountResponse", 
            "name": "", 
            "properties": {
              "message": {
                "description": "success or failure", 
                "name": "message", 
                "type": "string"
              }, 
              "result": {
                "name": "result", 
                "type": "ServiceAccount"
              }, 
              "status": {
                "description": "success or failure", 
                "name": "status", 
                "type": "string"
              }
            }
          }
        }, 
        "resourcePath": "/admin/v2", 
        "swaggerVersion": "1.2"
      }, 
      "description": "Tenant admin services.", 
      "name": "admin", 
      "path": "/admin", 
      "url": "http://localhost:9999/admin"
    }
  ], 
  "authorizations": {
    "basicAuth": {
      "type": "basicAuth"
    }, 
    "oauth2": {
      "grantTypes": {
        "authorization_code": {
          "tokenEndpoint": {
            "tokenName": "access_code", 
            "url": "https://api.tacc.cloud/token"
          }, 
          "tokenRequestEndpoint": {
            "clientIdName": "client_id", 
            "clientSecretName": "client_secret", 
            "url": "https://api.tacc.cloud/authorize"
          }
        }, 
        "implicit": {
          "loginEndpoint": {
            "url": "https://api.tacc.cloud/login"
          }, 
          "tokenName": "access_token"
        }
      }, 
      "scopes": [
        {
          "description": "catchall grant type for all api services.", 
          "scope": "PRODUCTION"
        }
      ], 
      "type": "oauth2"
    }
  }, 
  "info": {
    "contact": "opensource@tacc.cloud", 
    "description": "Science-as-a-Service platform for accelerating research and discovery", 
    "licenseUrl": "http://agaveapi.co/terms", 
    "termsOfServiceUrl": "https://portal.tacc.utexas.edu/tacc-usage-policy", 
    "title": "TACC Cloud APIs"
  }, 
  "produces": [
    "application/json"
  ], 
  "swaggerVersion": "1.2", 
  "url": "https://api.tacc.cloud/"
}